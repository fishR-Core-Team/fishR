---
title: von Bertalanffy Growth Plots II
description: How to plot multiple von Bertalanffy growth models with data.
author: Derek H. Ogle
date: 1/2/2019
image: preview.png
categories:
  - Age
  - Growth
  - Size
  - ggplot2
knitr: 
  opts_chunk:
    fig.width: 4
    fig.height: 4
---

:::{.callout-note}
The following packages are loaded for use below. One function from `investr` is also used but the whole package is not loaded here. The data are also from `FSAdata`, which is not loaded below. I also set the default `ggplot` theme to `theme_bw()` for a classic "black-and-white" plot (rather than the default plot with a gray background).
:::

```{r packages}
library(FSA)     # for vbFuns(), vbStarts(), headtail(), peek()
library(dplyr)   # for filter(), mutate(), group_by()
library(ggplot2)
theme_set(theme_bw())
```

&nbsp;

# Introduction
In [a previous post](../2019-12-31_vonB_plots_1/index.html) I demonstrated how to plot the fit of a von Bertalanffy growth function (VBGF) for a single group of observed data. In this post, I explore methods to do the same for multiple groups of observed data (e.g., multiple sexes, locations, years).

I will again use the lengths and ages of Lake Erie Walleye (*Sander vitreus*) captured during October-November, 2003-2014 available in [`FSAdata`](https://fishr-core-team.github.io/FSAdata/). These data formed many of the examples in @ogleetal_2017. My primary interest here is in the `tl` (total length in mm), `age`, and `sex` variables.^[See [more details about the data](https://fishr-core-team.github.io/FSAdata/reference/WalleyeErie2.html).] I initially focus on Walleye from location "1" captured in 2014 in this example.^[For succinctness, I removed `year` as it only had one level after filtering and three variables related to the `loc`ation of capture.]

```{r data}
#| label: data
data(WalleyeErie2,package="FSAdata")
w14T <- WalleyeErie2 |>
  filter(year==2014,loc==1) |>
  select(-year,-setID,-loc,-grid)
headtail(w14T)
```

As in the [previous post](../2019-12-31_vonB_plots_1/index.html), a function that uses the typical VBGF to predict mean length given a set of VBGF parameters and age is needed.^[Other parameterizations of the VBGF can be used with `param=` in `vbFuns()` as described in [its documentation](https://fishr-core-team.github.io/FSA/reference/growthModels.html).]

```{r}
( vb <- vbFuns(param="Typical") )
```

&nbsp;

# Model Fits Using `geom_smooth()`
One of the simpler ways to plot multiple VBGF fits uses `geom_smooth()`, which, as described in the [previous post](../2019-12-31_vonB_plots_1/index.html), uses `nls()` to fit the model "behind-the-scenes." Thus, a set of starting values is needed. It is critical to note that using `geom_smooth()` requires the **same** starting values for each group. With this warning, possible starting values for the optimization algorithm may be obtained with `vbStarts()` as shown in the [previous post](../2019-12-31_vonB_plots_1/index.html).

```{r}
( sv0 <- vbStarts(tl~age,data=w14T) )
```

The use of `geom_smooth()` to produce separate lines for the groups is exactly as described in the [previous post](../2019-12-31_vonB_plots_1/index.html), except that the variable for identifyng the groups (i.e., `sex` in this example) must be mapped to the `color=` `aes()`thetic. For @fig-sex1 I also used `scale_color_manual()` to demonstrate how to change the default colors of the points and lines. Additionally, in `theme()` I moved the legend into the plot panel^[In this case the legend is placed 80% down the x-axis and 20% up the y-axis.] and removed the default `sex` label that would appear on top of the legend.

```{r}
#| label: fig-sex1
#| fig.cap: Fit of typical von Bertalanffy growth function to male and female Lake Erie Walleye in 2014.
ggplot(data=w14T,aes(x=age,y=tl,color=sex)) +
  geom_point(size=2,alpha=0.3) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred")) +
  geom_smooth(method="nls",se=FALSE,
              method.args=list(formula=y~vb(x,Linf,K,t0),start=sv0),
              linewidth=1) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position=c(0.8,0.2),
        legend.title=element_blank())
```

&nbsp;

An alternative visualization is to put the two groups into separate panels using `facet_wrap()`.^[Simply put the grouping variable inside of `vars()` as the argument to `facet_wrap()`.] Note that color is superfluous in @fig-sex1a, but I kept it for comparison to @fig-sex1. Mapping color to a variable will produce a legend by default. This legend was removed (in `theme()`), however, because it is redundant with the panel labels.

```{r}
#| label: fig-sex1a
#| fig.cap: Fit of typical von Bertalanffy growth function to male and female Lake Erie Walleye in 2014.
#| fig-width: 8
ggplot(data=w14T,aes(x=age,y=tl,color=sex)) +
  geom_point(size=2,alpha=0.3) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred")) +
  geom_smooth(method="nls",se=FALSE,
              method.args=list(formula=y~vb(x,Linf,K,t0),start=sv0),
              linewidth=1) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position="none") +
  facet_wrap(vars(sex))
```

&nbsp;

# Fitting the VBGF to Multiple Groups
Methods for fitting a von Bertalanfy growth function (VBGF) to multiple groups are detailed in @ogleIntroductoryFisheriesAnalyses2016 and @ogleetal_2017. Thus, this methodology will only be briefly explained here.

Fitting the VBGF to multiple groups requires creating an expression, rather than a function, with the VBGF defined over the multiple groups. The expression below codes the VBGF using the length and age variables from the data set used here (i.e., `tl` and `age`) and assuming different parameters should be estimated for each group.^[See @ogleIntroductoryFisheriesAnalyses2016 and @ogleetal_2017 for examples of how to fit the VBGF assuming situations where some parameters differ and some do not across groups.] Identifying the different groups is accomplished here by appending `[group]`, where `group` is replaced with the specific variable name that identifies the groups (i.e., `sex` here). The expression is assigned to an object name (i.e., `vbLKt` here).

```{r}
vbLKt <- tl~Linf[sex]*(1-exp(-K[sex]*(age-t0[sex])))
```

&nbsp;

I created vectors of group names (with `unique()`) and the number of groups (with `length()`) for ease of use below.

```{r}
( grps <- unique(w14T$sex) )
( ngrps <- length(grps) )
```

&nbsp;

This model has six parameters -- $L_{\infty}$, $K$, and $t_{0}$ for each of the two groups (male and female Walleye). Starting values must be declared for each of these parameters. Here I find starting values from the data ignoring the groups (using `vbStarts()` as described in the [previous post](../2019-12-31_vonB_plots_1/index.html)) and replicate those starting values for both groups.^[In some instances using the same starting values for both groups will not result in model convergence. See @ogleIntroductoryFisheriesAnalyses2016 and @ogleetal_2017 for suggestions for handling those cases.]

```{r}
( sv0 <- vbStarts(tl~age,data=w14T) )
```

`Map` replicates the starting values in the list from `vbStarts()` with `rep` (the replicated function), the object returned from `vbStarts()`, and a numeric vector that explains how many times each parameter should be repeated (i.e., the same as the number of groups).

```{r}
( svLKt <- Map(rep,sv0,c(2,2,2)) )
```

The model is fit to the data by including the VBGF expression object, `data=`, and `start=` as arguments to `nls()`. The parameter estimates and confidence intervals may be extracted from the saved `nls()` object with `coef()` and `confint()`.^[Column-bound here for aesthetic reasons.] Note that the parameters will be appended with numbers in the alphabetical order of the groups.^[Unless your chose to order the levels of the group variable differently.] Thus, in this example, it is seen that the estimated $L_{\infty}$ for females (appended with a "1") is greater than that for males.

```{r}
fitLKt <- nls(vbLKt,data=w14T,start=svLKt)
cbind(Ests=coef(fitLKt),confint(fitLKt))
```

&nbsp;

# Model Fits from Predicted Values
The model fit above can be used to predict the mean length at age for all groups, both within and outside the observed range of ages. These results can then be used to show the model fit by group. However, a bit of work outside of `ggplot` is required to prepare the relevant data.

A data frame that contains predicted mean lengths at age over a range of ages for all groups is needed. I begin this process by finding (and assigning to an object for later use) the range of ages for each group.^[`as.data.frame()` removes the `tibble` returned by `group_by()`, which I don't prefer]

```{r}
obsagerng <- w14T |>
  group_by(sex) |>
  summarize(min=min(age),
            max=max(age)) |>
  as.data.frame()
obsagerng
```

From this, I create a temporary vector of 101 ages^[Use a larger value for `length.out=` to make the line produced further below more smooth.] evenly spaced over a range of ages larger than what was observed.^[Zero was an observed age here, if not I usually make sure it is included.]

```{r}
ages <- seq(-1,12,length.out=101)
```

I then create a data frame that has the name of each group repeated as many times as there are ages in the temporary age vector (i.e., 101 here) and has ages from the temporary age vector repeated for each group (i.e., twice here). Note the careful use of `each=` and `times=` in `rep()` below.

```{r}
preds <- data.frame(sex=rep(grps,each=length(ages)),
                    age=rep(ages,times=ngrps))
headtail(preds)
```

Predicted mean lengths at each age for each group are then appended to this data frame by giving the fitted `nls()` object and this data frame to `predict()`.

```{r}
preds <- preds |>
  mutate(fit=predict(fitLKt,preds))
headtail(preds)
```

Finally, I add a fourth variable that will be `TRUE` if the age is within the range of observed ages for the group. `group_by()` below behaves like a loop here in the sense that what follows that line will be completed for the first group, then the second group, and so on. For the `mutate()` lines suppose that we are working with the first group (i.e., "female"). In this case, `unique(sex)` will return `female` such that `obsagerng[obsagerng$sex==unique(sex),]` will find the row of `obsagerng` where its `sex` variable is equal to "female". The `$min` appended to that will extract just the value in the `min` variable of that row (so the minimum observed age for females). The `age>=obsagerng[obsagerng$sex==unique(sex),]$min` portion is thus asking if the `age` variable in `preds` is greater than or equal to the minimum observed age for females. If it is it will return `TRUE`, otherwise `FALSE` will be returned. The second part `mutate()` asks if the `age` variable in `preds` is less than or equal to the maximum observed age for females, again returning `TRUE` or `FALSE` as appropriate. Those two conditions are connected with an `&` such that if they are **both** `TRUE` then a `TRUE` is returned, otherwise a `FALSE` is returned. The result is that the new `inrng` variable will be `TRUE` if the `age` variable within `preds` is within the observed range of ages for each `sex` in `preds`.^[`FSA::peek()` is used here to show an evenly spaced 20 rows in the data frame. This provides more output than `headtail()` for observing the results of code.]

```{r}
preds <- preds |>
  group_by(sex) |>
  mutate(inrng=age>=obsagerng[obsagerng$sex==unique(sex),]$min &
               age<=obsagerng[obsagerng$sex==unique(sex),]$max)
FSA::peek(preds)
```

&nbsp;

@fig-sex2 is created by combining similar code from the [previous post](../2019-12-31_vonB_plots_1/index.html) and the use of `color=` from above. In brief, `geom_point()` adds points at the observed lengths at age, the first `geom_line()` adds the fitted models from the predicted mean lengths at **all** ages in `preds` as dashed lines, and the second `geom_line()` adds the fitted models from the predicted mean lengths **only** at observed ages for each group as solid lines.^[Note the use `filter()` in the second `geom_line()` so that only data for which `inrng==TRUE` is used.]

```{r}
#| label: fig-sex2
#| fig.cap: Fit of typical von Bertalanffy growth function to male and female Lake Erie Walleye in 2014. The dashed lines show the model fits outside the range of observed ages for each sex.
ggplot() +
  geom_point(data=w14T,aes(x=age,y=tl,color=sex),
             size=2,alpha=0.3) +
  geom_line(data=preds,aes(x=age,y=fit,color=sex),
              linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,inrng),aes(x=age,y=fit,color=sex),
              linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred")) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position=c(0.8,0.2),
        legend.title=element_blank())
```

&nbsp;

# Model Fit with Confidence Band
Creating a graphic that has the model fit **with** confidence (or prediction) bands for multiple groups again requires some preparatory work before using `ggplot()`.

For simplicity and completeness of presentation, the code below is repeated from above.

```{r}
vb <- vbFuns(param="Typical")     ## Typical VBGF
grps <- unique(w14T$sex)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- w14T |>              ## Range of observed ages by group
  group_by(sex) |>
  summarize(min=min(age),
            max=max(age))
sv0 <- vbStarts(tl~age,data=w14T) ## Starting values ignoring groups
```

As before, starting values are needed for each group. Here, however, I place the starting values into a data frame where each row corresponds to one group and a variable that identifies the groups is included.^[For simplicity name this variable the same as it is in the main data frame.]

```{r}
( svLKt <- data.frame(sex=grps,
                      Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
```

The starting values created here are the same for each group. This will likely work in most cases (of fish growth data) but likely not all. Starting values can be entered into the data frame manually as shown below.^[@ogleIntroductoryFisheriesAnalyses2016 and @ogleetal_2017 discuss alternative methods of finding starting values. But note that this may take some work if there are many groups.]

```{r}
#| eval: false
## Not run: Demo of manually entering starting values; not needed in this case
( svLKt <- data.frame(sex=grps,
                      Linf=c(630,580),
                      K=c(0.34,0.34),
                      t0=c(-1,-2)) )
```

The method used here basically loops through the groups, uses the procedures of the [previous post](../2019-12-31_vonB_plots_1/index.html) (for one group) and above to find fitted values and confidence (or prediction) bands for each group, and then (row) binds those results together to produce a synthetic data frame for all groups. The process for a single group is wrapped into a function called `vbLOOP1()` below. The ordered arguments to `vbLOOP1()` are a group name, the original data frame, the data frame of starting values for all groups, the data frame of observed age ranges, and a vector that identifies the overall range over which to predict mean lengths at age. `vbLOOP1` will default to returning confidence intervals, but prediction intervals can be returned by including `interval="prediction"`.^[See code comments for the parts of this function that are specific to this case and, thus, might have to be changed for other data.]

```{r}
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
  ## !! This requires a 'sex', 'tl', and 'age' variable in data frames !!
  ## !!   Otherwise need to change 'sex', 'tl', and 'age' below
  ## !!   Everything else can stay as is
  
  ## Loop notification (for peace of mind)
  cat(grp,"Loop\n")
  ## Isolate group's data, starting values, and age range
  dat1 <- dplyr::filter(dat,sex==grp)
  sv1 <- svs |>
    filter(sex==grp) |>
    select(-sex) |>
    as.list()
  oagerng1 <- filter(oagerng,sex==grp)
  ## Make ages for predictions
  ages <- seq(min(eagerng),max(eagerng),length.out=101)
  ## Fit von B to that group
  fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
  ## Make data frame of predicted mean lengths at age with CIs
  preds1 <- data.frame(sex=grp,
                       age=ages,
                       fit=investr::predFit(fit1,data.frame(age=ages),
                                            interval=interval)) |>
    mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
    as.data.frame()
  ## Rename variables
  names(preds1) <- c("sex","age","fit","lwr","upr","inrng")
  ## Return data frame
  preds1
}
```

&nbsp;

The code below initiates an object called `preds` that will hold the resulting data frame and then loops through the values in `grps`, running `vbLOOP1()` for each group with the `w14T` data frame of observed lengths and ages, `svLKt` data frame of starting values, `obsagerng` data frame of observed age ranges, and ages for making predictions that are between -1 and 12. The results for each group are row bound (i.e., using `rbind()`) together to produce the stacked results partially shown with `peek()`.

```{r}
preds <-  NULL
for (i in grps) preds <- rbind(preds,vbLOOP1(i,w14T,svLKt,obsagerng,c(-1,12)))
peek(preds)
```

&nbsp;

@fig-sex3 is then constructed almost identically to @fig-sex2 except that `geom_ribbon()` is used to produce the confidence bands, with the lower part of the ribbon at the lower confidence values (i.e., `ymin=lwr`) and the upper part at the upper confidence value (i.e., `ymax=upr`) produced from the loop above.^[Add `geom_ribbon()` first so that it is behind the points and model lines.] `fill=` gives the color of the enclosed ribbon. Further note that `aesthetics=` must be defined in `scale_color_manual()` because `geom_ribbon()` used `fill=`, whereas the other geoms used `color=`.

```{r}
#| label: fig-sex3
#| fig.cap: Fit of typical von Bertalanffy growth function to male and female Lake Erie Walleye in 2014. The dashed lines show the model fits outside the range of observed ages for each sex.
ggplot() +
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr,fill=sex),alpha=0.25) +
  geom_point(data=w14T,aes(x=age,y=tl,color=sex),
             size=2,alpha=0.3) +
  geom_line(data=preds,aes(x=age,y=fit,color=sex),
              linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,inrng),aes(x=age,y=fit,color=sex),
              linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred"),
                     aesthetics=c("color","fill")) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position=c(0.8,0.2),
        legend.title=element_blank())
```


```{r}
#| echo: false
#| results: hide
## This names the previous plot to use as preview in the last chunk.
preview <- ggplot() +
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr,fill=sex),alpha=0.25) +
  geom_point(data=w14T,aes(x=age,y=tl,color=sex),
             size=2,alpha=0.3) +
  geom_line(data=preds,aes(x=age,y=fit,color=sex),
              linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,inrng),aes(x=age,y=fit,color=sex),
              linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred"),
                     aesthetics=c("color","fill")) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position=c(0.8,0.2),
        legend.title=element_blank())
```

&nbsp;

Of course, the graph can also be separated by the grouping variable (@fig-sex3a).

```{r}
#| label: fig-sex3a
#| fig.cap: Fit of typical von Bertalanffy growth function to male and female Lake Erie Walleye in 2014. The dashed lines show the model fits outside the range of observed ages for each sex.
#| fig.width: 8
ggplot() +
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr,fill=sex),alpha=0.25) +
  geom_point(data=w14T,aes(x=age,y=tl,color=sex),
             size=2,alpha=0.3) +
  geom_line(data=preds,aes(x=age,y=fit,color=sex),
              linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,inrng),aes(x=age,y=fit,color=sex),
              linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  scale_color_manual(values=c("male"="darkblue","female"="darkred"),
                     aesthetics=c("color","fill")) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position="none") +
  facet_wrap(vars(sex))
```

&nbsp;

# More than Two Groups
The process defined above can be extended to more than two groups. Here I examine just female walleye captured in four years, as an example. Note here that `year` must be explicitly turned to a factor so that it will be treated as a group identifier rather than a numeric value.

```{r}
wfT <- WalleyeErie2 |>
  filter(sex=="female",loc==1,year %in% c(2005,2008,2011,2014)) |>
  mutate(year=factor(year)) |>
  select(-loc,-setID,-grid,-sex)
```

The code below is repeated from above, but everywhere where `sex` was in the code has been changed to `year` (our new grouping variable). Once again note that using the same starting values for all groups may not always work (but it did here).

```{r}
grps <- unique(wfT$year)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- wfT |>               ## Range of observed ages by group
  group_by(year) |>
  summarize(min=min(age),
            max=max(age))

sv0 <- vbStarts(tl~age,data=wfT)  ## Starting values ignoring groups
( svLKt <- data.frame(year=grps,
                      Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
```

The `vbLOOP1()` function needs to be modified by replacing all instances of `sex` to `year`. Be careful to change **all** instances here.

```{r}
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
  ## !! This requires a 'year', 'tl', and 'age' variable in data frames !!
  ## !!   Otherwise need to change 'year', 'tl', and 'age' below
  ## !!   Everything else can stay as is
  
  ## Loop notification (for peace of mind)
  cat(grp,"Loop\n")
  ## Isolate group's data, starting values, and age range
  dat1 <- dplyr::filter(dat,year==grp)
  sv1 <- svs |>
    filter(year==grp) |>
    select(-year) |>
    as.list()
  oagerng1 <- filter(oagerng,year==grp)
  ## Make ages for predictions
  ages <- seq(min(eagerng),max(eagerng),length.out=101)
  ## Fit von B to that group
  fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
  ## Make data frame of predicted mean lengths at age with CIs
  preds1 <- data.frame(year=grp,
                       age=ages,
                       fit=investr::predFit(fit1,data.frame(age=ages),
                                            interval=interval)) |>
    mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
    as.data.frame()
  ## Rename variables
  names(preds1) <- c("year","age","fit","lwr","upr","inrng")
  ## Return data frame
  preds1
}
```

This code is largerly the same as in the previous example except that the name of the observed data is changed as is the range over which the model will be evaluated.

```{r}
preds <-  NULL
for (i in grps) preds <- rbind(preds,vbLOOP1(i,wfT,svLKt,obsagerng,c(0,14)))
peek(preds)
```

Once again, change all instances of `sex` to `year` below. I also need to modify the `limits=` of the y-axis and the `breaks=` of the x-axis. Also note that I removed `scale_color_manual()` so that the default colors would be used. If you don't want to use the default colors you would need to make sure that you identify as many colors as you have groups (four in this case).

```{r}
#| label: fig-sex4
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2005, 2008, 2011, and 2014. The dashed lines show the model fits outside the range of observed ages for each sex.
#| fig.width: 8
#| fig.height: 8
ggplot() +
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr,fill=year),alpha=0.25) +
  geom_point(data=wfT,aes(x=age,y=tl,color=year),
             size=2,alpha=0.3) +
  geom_line(data=preds,aes(x=age,y=fit,color=year),
              linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,inrng),aes(x=age,y=fit,color=year),
              linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,800)) +
  scale_x_continuous(name="Age (years)",breaks=0:16) +
  theme(panel.grid.minor.x=element_blank(),
        legend.position="none") +
  facet_wrap(vars(year))
```

&nbsp;

```{r}
#| echo: false
#| fig.show: "hide"
#| results: "hide"
# This is used as a work-around for creating a preview image. See the
#   discussion at https://github.com/quarto-dev/quarto-cli/issues/2042
png("preview.png",width=1000,height=500,units="px",
    bg="transparent",res=216)
preview +
  theme(aspect.ratio=1)
dev.off()
```
