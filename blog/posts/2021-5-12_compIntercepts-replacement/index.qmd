---
title: Replace compIntercepts() with emmeans()
description: Using `emmeans()` from `emmeans` as an alternative to `compIntercepts()` which was removed from `FSA`.
author: Derek H. Ogle
date: 5/12/2021
image: preview.png
categories:
  - FSA
  - emmeans
---

:::{.callout-note}
The following packages are loaded for use below.
:::

```{r packages}
library(dplyr)    ## for filter(), mutate()
library(emmeans)  ## for emmeans()
```

:::{.callout-warning}
Some functions illustrated below were in the `FSA` package but have now been removed and put into the non-released `FSAmisc` package that I maintain. These functions are used below **only** to show what could be done in older versions of `FSA` but should now be done as described in this post. **DO NOT USE any of the functions below that begin with `FSAmisc::`.** 
:::

&nbsp;

# Introduction
`compIntercepts()` in `FSA` prior to v0.9.0 was used to statistically compare intercepts for all pairs of groups in an indicator/dummy variable regression (IVR). However, the excellent `emmeans()` in `emmmeans` is a more general and strongly principled function for this purpose. As such, `compIntercepts()` was removed from `FSA` in early 2022. The purpose of this post is to demonstrate how to use `emmeans()` for the same purpose for which `compIntercepts()` was used.

:::{.callout-important}
The results from `compIntercepts()` and `emmeans()` will not be identical because they use different methods to correct for multiple comparisons when comparing pairs of slopes.
:::

&nbsp;

# Example Data
Examples below use the `Mirex` data set from `FSA`, which contains the concentration of mirex in the tissue and the body weight of two species of salmon (`chinook` and `coho`) captured in six years. The `year` variable is converted to a factor for modeling purposes. To keep the presentation simple, data from only three years will be used here.

```{r}
data(Mirex,package="FSA")
Mirex <- Mirex |>
  filter(year<1990) |>
  mutate(year=factor(year))
head(Mirex)
```

The `lm()` below fits the IVR to determine if the relationship between mirex concentration and weight of the salmon differs by year.^[The three terms on the left side of the formula are the covariate (i.e., `weight`), main factor (i.e., `year`), and the interaction between the two (defined with the `:`).]

```{r}
lm1 <- lm(mirex~weight+year+weight:year,data=Mirex)
```

The `weight:year` interaction term p-value suggests that the slopes (i.e., relationship between mirex concentration and salmon weight) do **not** differ among the three years. However, the `year` term p-value suggests that the intercepts of at least one pair of these parallel lines DO differ.^[The `weight` term p-value suggests that there is a significant relationship between mirex concentration and salmon weight, regardless of which year is considered.]

```{r}
anova(lm1)
```

The next step is to determine which pair(s) of intercepts differ significantly. A model that does **not** include the insignificant interaction term is needed by both `compIntercepts()` and `emmeans()` to properly answer this question. That model is fit below. 

```{r}
lm1_noint <- lm(mirex~weight+year,data=Mirex)
```

&nbsp;

# What `compIntercepts()` Did
The procedure used by `compSlopes()` to compare intercepts is described in more detail [here](http://derekogle.com/IFAR/supplements/weightlength/index.html#pinpointing-specific-differences-among-intercepts). `compIntercepts()` was simple in that it only required the saved `lm()` object as an argument. Its returned results should be assigned to an object for further examination.^[`compIntercepts()` had a `print()` function for nicely printing the results. However, here we will look at each component separately to ease comparison with the `emmeans()` results.]

```{r}
cifsa <- FSAmisc::compIntercepts(lm1_noint)
```

The `$comparisons` component in this saved object contains the results from comparing all pairs of intercepts. Each paired comparison is a row in these results with the groups being compared under `comparison`, the differences in sample intercepts under `diff`, 95% confidence intervals for the difference in intercepts under `95% LCI` and `95% UCI`, and adjusted (for multiple comparisons) p-values for the hypothesis test comparing the intercepts under `p.adj`.

```{r}
cifsa$comparisons
```

For example, these results suggest that the intercepts for 1982 and 1977 ARE statistically different (first row), but the intercepts for 1986 and 1982 are NOT statistically different (last row).

The `$smeans` component in this saved object contains the mean value of the response variable predicted at the mean value of the covariate. For example, the results below show the predicted mean mirex concentration at the overall mean salmon weight (i.e., `r formatC(cifsa$common.cov,format="f",digits=6)` kg).

```{r}
cifsa$means
```

Because the lines are known to be parallel, differences in intercepts also represent differences in predicted means of the response at all other values of the covariate. `compIntercepts()` defaulted to show these means at the mean (i.e., center) of the covariate. This could be adjusted with `common.cov=` in `compIntercepts()`. For example, the actual intercepts are shown below.

```{r}
cifsa2 <- FSAmisc::compIntercepts(lm1_noint,common.cov=0)
cifsa2$means
```
&nbsp;

# What `emmeans()` Does
Similar results can be obtained with `emmeans()` from `emmeans` using the fitted `lm()` object (without the interaction term) as the first argument and a `specs=` argument with `pairwise~` followed by the name of the factor variable from the `lm()` model (`year` in this case).

```{r}
ci <- emmeans(lm1_noint,specs=pairwise~year)
```

The object saved from `emmeans()` is then given as the first argument to `summary()`, which also requires `infer=TRUE` if you would like p-values to be calculated.[^pvalues]

```{r}
cis <- summary(ci,infer=TRUE)
```

The `$contrasts` component in this saved object contains the results for comparing all pairs of predicted means at the overall mean of the covariate. Each paired comparison is a row with the groups compared under `contrast`, the difference in predicted means under `estimate`, the standard error of the difference in predicted means under `SE`, the degrees-of-freedom under `df`, a 95% confidence interval for the difference in predicted means under `lower.CL` and `upper.CL`, and the t test statistic and p-value adjusted for multiple comparisons for testing a difference in predicted means under `t.ratio` and `p.value`, respectively.

```{r}
cis$contrasts
```

Comparing these results to the `$comparison` component from `compIntercepts()` shows that the difference in sample intercepts or predicted means are the same, though the signs differ because the subtraction was reversed. The confidence interval values and p-values are slightly different. Again, this is due to `emmeans()` and `compIntercepts()` using different methods of adjusting for multiple comparisons. These differences did not result in different conclusions in this case, but they could, especially if the p-values are near the rejection criterion.

The `$emmeans` component contains results for predicted means for each group with the groups under the name of the factor variable (`year` in this example), the predicted means under `emmean`, standard errors of the predicted means under `SE`, degrees-of-freedom under `df`, 95% confidence intervals for the predicted mean under `lower.CL` and `upper.CL`, and t test statistics and p-values adjusted for multiple comparisons for testing that the predicted mean is not equal to zero under `t.ratio` and `p.adj`, respectively. While it is not obvious here, these predict means of the response variable are at the mean of the covariate, as they were for `compIntercepts()`.

```{r}
cis$emmeans
```

Here the predicted means match exactly (within rounding) with those in the `$means` component of `compIntercepts()`.

The means can be predicted at any other "summary" value of the covariate using `cov.reduce=` in `emmeans()`. For example, the predicted values at the minimum value of the covariate are obtained below.

```{r}
ci2 <- emmeans(lm1_noint,specs=pairwise~year,cov.reduce=min)
cis2 <- summary(ci2,infer=TRUE)
cis2$emmeans
```

The following will compute predicted means that represent the actual intercepts.

```{r}
ci3 <- emmeans(lm1_noint,specs=pairwise~year,cov.reduce=function(x) 0)
cis3 <- summary(ci3,infer=TRUE)
cis3$emmeans
```

&nbsp;

## Conclusion
`emmeans()` in `emmeans` provides a more general solution to comparing multiple slopes than what was used in `compIntercepts()` in `FSA` prior to v0.9.0. As `compIntercepts()` was removed from FSA in 2022, you should now use `emmeans()` for this purpose.

`emmeans` has extensive vignettes that further explain its use. Their ["Basics" vignette](https://cran.r-project.org/web/packages/emmeans/vignettes/basics.html) is also useful.

In a [previous post](../2021-5-11_compSlopes-replacement/) I demonstrated how to use `emtrends()` from `emmeans` to replace `compSlopes()`, which was also removed from `FSA`.

:::{.callout-note}
This change to `FSA` does not affect anything in @ogleIntroductoryFisheriesAnalyses2016. However, the use of `compSlopes()` in [this supplement](http://derekogle.com/IFAR/supplements/weightlength/index.html) to @ogleIntroductoryFisheriesAnalyses2016 will no longer work as described and will need to use `emmeans()` instead.
:::

&nbsp;

```{r}
#| echo: false
#| fig.show: "hide"
#| results: "hide"
# This is used as a work-around for creating a preview image. See the
#   discussion at https://github.com/quarto-dev/quarto-cli/issues/2042
source("../_helpers.R")
sc2pv()
```
