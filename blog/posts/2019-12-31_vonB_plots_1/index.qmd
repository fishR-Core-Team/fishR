---
title: von Bertalanffy Growth Plots I
description: How to plot one von Bertalanffy growth model with data.
author: Derek H. Ogle
date: 12/31/2019
image: preview.png
categories:
  - Age
  - Growth
  - Size
  - ggplot2
knitr: 
  opts_chunk:
    fig.width: 4
    fig.height: 4
---

:::{.callout-note}
The following packages are loaded for use below. One function from `investr` is also used but the whole package is not loaded here. The data are also from `FSAdata`, which is not loaded below. I also set the default `ggplot` theme to `theme_bw()` for a classic "black-and-white" plot (rather than the default plot with a gray background).
:::

```{r packages}
library(FSA)     # for vbFuns(), vbStarts(), headtail()
library(dplyr)   # for filter(), mutate()
library(ggplot2)
theme_set(theme_bw())
```

&nbsp;

# Introduction
The most common questions that I receive through the **fishR** website are related to fitting a von Bertalanffy growth function (VBGF) to data and viewing the results. In this post, I briefly demonstrate how to fit a VBGF to a single group of data and then provide several options for how to view the fit of the function to those data.

I will use lengths and ages of Lake Erie Walleye (*Sander vitreus*) captured during October-November, 2003-2014 available in [`FSAdata`](https://fishr-core-team.github.io/FSAdata/) package. These data formed many of the examples in @ogleetal_2017. My primary interest here is in the `tl` (total length in mm) and `age` variables^[See [more details about the data](https://fishr-core-team.github.io/FSAdata/reference/WalleyeErie2.html).]. I focus on female Walleye from location "1" captured in 2014 in this example.^[For succinctness, I removed `year` and `sex` as they only had one category after filtering and three variables related to the `loc`ation of capture.]

```{r data}
#| label: data
data(WalleyeErie2,package="FSAdata")
wf14T <- WalleyeErie2 |>
  filter(year==2014,sex=="female",loc==1) |>
  select(-year,-sex,-setID,-loc,-grid)
headtail(wf14T)
```

&nbsp;

# Fitting the VBGF
Methods for fitting a von Bertalannfy growth function (VBGF) are detailed in @ogleIntroductoryFisheriesAnalyses2016 and @ogleetal_2017. Thus, this methodology will only be briefly explained here.

A function for the typical VBGF is constructed with `vbFuns()`.^[Other parameterizations of the VBGF can be used with `param=` in `vbFuns()` as described in [its documentation](https://fishr-core-team.github.io/FSA/reference/growthModels.html).]

```{r}
( vb <- vbFuns(param="Typical") )
```

Some of the methods below use the fact that the three parameters of the typical VBGF ($L_{\infty}$, $K$, $t_{0}$) can be given to this function separately (in that order) or as a vector (still in that order). For example, both lines below can be used to predict the mean length for an age-3 fish with the given VBGF parameters.^[The parameters could be given in a different order but would need to be named; e.g., `vb(3,t0=-0.5,K=0.3,Linf=300)`.]

```{r}
vb(3,300,0.3,-0.5)
tmp <- c(300,0.3,-0.5) 
vb(3,tmp)
```

Reasonable starting values for the optimization algorithm may be obtained with `vbStarts()`, where the first argument is a formula of the form `lengths~ages` where `lengths` and `ages` are replaced with the actual variable names that contain the observed lengths and ages, respectively, and `data=` is set to the data frame that contains those variables.

```{r}
( sv0 <- vbStarts(tl~age,data=wf14T) )
```

The `nls()` function is typically used to estimate parameters of the VBGF from observed data. The first argument is a formula that has `lengths` on the left-hand-side and the VBGF function created above on the right-hand-side. The VBGF function has the `ages` variable as its first argument and then `Linf`, `K`, and `t0` as the remaining arguments (just as they appear here). Again, the data frame with the observed lengths and ages is given to `data=` and the starting values derived above are given to `start=`.

```{r}
fit0 <- nls(tl~vb(age,Linf,K,t0),data=wf14T,start=sv0)
```

The parameter estimates and confidence intervals are extracted from the saved `nls()` object with `coef()` and `confint()`, respectively.^[This `confint()` requires the `MASS` package which is usually loaded automatically with base R.] They are column-bound together here for aesthetic reasons.

```{r}
cbind(Est=coef(fit0),confint(fit0))
```

&nbsp;

# Model Fit Using `stat_function()`
Here all "layers" of the plot will use the same data; thus, `data=` and the `aes()`thetic mappings are defined in `ggplot()`. Observed lengths and ages are added to the plot with `geom_point()`. The points in @fig-vbfit1 were made slightly larger than the default (with `size=`) and also with a fairly low transparency value to handle considerable over-plotting. `scale_y_continuous()` and `scale_x_continuous()` control aspects of y- and x-axes, respectively -- labels for axes are given in `name=`, minimum and maximum limits for the axis are in `limits=`, and specific major breaks for the axis are in `breaks=`.^[`seq(0,700,100)` makes a vector of numbers from 0 to 700 in increments of 100 and `0:11` makes a vector of integers from 0 to 11.] Finally, the fitted model line is added to the plot with `stat_function()` with the VBGF function created above in `fun=` and a list of arguments to this function in `args=`.^[The usage here exploits the fact that all three parameters of the VBGF can be given in the first parameter argument, `Linf=`.] In @fig-vbfit1 I made the model line a little wider than the default. Finally the `theme()` was modified to remove the minor grid lines from both axes.^[Thus the gridlines only appear for labelled axis breaks.]

```{r}
#| label: fig-vbfit1
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014.
ggplot(data=wf14T,aes(x=age,y=tl)) +
  geom_point(size=2,alpha=0.1) +
  scale_y_continuous(name="Total Length (mm)",
                     limits=c(0,700),breaks=seq(0,700,100)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  stat_function(fun=vb,args=list(Linf=coef(fit0)),linewidth=1) +
  theme(panel.grid.minor=element_blank())
```

&nbsp;

The model line can be displayed outside the range of observed ages by including minimum and maximum values in `xlim=` over which the function in `fun=` will be evaluated. In @fig-vbfit1a I add a dashed line for the model that includes evaluation at ages outside the observed range of ages (first `stat_function()`) and then plotted the model line for observed ages on top of that (second `stat_function()`). This gives the impression of using a dashed line only for the ages that would be extrapolated.^[I would usually change the axis expansion factors here to clean this plot up a bit.]

```{r}
#| label: fig-vbfit1a
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014. The dashed line shows the model fit outside the range of observed ages.
ggplot(data=wf14T,aes(x=age,y=tl)) +
  geom_point(size=2,alpha=0.1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  stat_function(fun=vb,args=list(Linf=coef(fit0)),
                xlim=c(-1,12),linewidth=1,linetype="dashed") +
  stat_function(fun=vb,args=list(Linf=coef(fit0)),linewidth=1) +
  theme(panel.grid.minor=element_blank())
```

&nbsp;

# Model Fit Using `geom_smooth()`
`geom_smooth()` can use `nls()` to fit the VBGF "behind the scenes" and then add the resultant model line to the plot. For this purpose `geom_smooth()` requires `method="nls"` and `se=FALSE`.^[`se=FALSE` is required because this argument is not implemented in `nls()`.] In addition, arguments for fitting the VBGF required by `nls()` must be in a list given to `methods.args=`. Minimum required arguments for fitting the VBGF are the VBGF `formula=` and `start=`ing values as shown for `nls()` above. @fig-vbfit2 uses `geom_smooth()` in this way to reproduce @fig-vbfit1.

```{r}
#| label: fig-vbfit2
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014.
ggplot(data=wf14T,aes(x=age,y=tl)) +
  geom_point(size=2,alpha=0.1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  geom_smooth(method="nls",se=FALSE,
              method.args=list(formula=y~vb(x,Linf,K,t0),start=sv0),
              color="black",linewidth=1) +
  theme(panel.grid.minor.x=element_blank())
```

&nbsp;

# Model Fit from Predicted Values
@fig-vbfit1 and @fig-vbfit1a can also be constructed from lengths predicted at a variety of ages "outside" of any `ggplot()` layers. I find it easier when using this method to first create a vector of ages over which the fitted model will be evaluated is then constructed. In this case the ages extend beyond the observed range of ages. The `seq()`uence produced here will have 101 age values between -1 and 12.^[Use a larger value for `length.out=` to make the line produced further below more smooth.]

```{r}
ages <- seq(-1,12,length.out=101)
```

The mean length at each of these ages is predicted with `predict()`, where the age vector just created is set equal to the name of the age variable in the `nls()` object inside of `data.frame()`. The vector of ages and predicted mean lengths are put into a data frame for plotting below.^[Here the data frame is called `preds` and it has two variables named `age` and `fit`.]
 
```{r}
preds <- data.frame(age=ages,
                    fit=predict(fit0,data.frame(age=ages)))
headtail(preds)
```

&nbsp;

These predicted mean lengths-at-age are then used to add a fitted model line to a plot of observed lengths-at-age with `geom_line()`. However, because the observed and predicted data are in different data frames, the `data=` and mapped `aes()`thetics are declared within the appropriate `geom`s rather than within `ggplot()`. For example, `geom_point()` is used below to add the observed data to the plot and `geom_line()` is used below to add the modeled line. Note below that separate `geom_line()`s are used to show the modeled line over extrapolated and observed ages.^[Also note the use of `filter()` to reduce the predicted lengths-at-age to the observed ages.] The results in @fig-vbfit3a reproduce @fig-vbfit1a.

```{r}
#| label: fig-vbfit3a
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014. The dashed line shows the model fit outside the range of observed ages.
ggplot() +
  geom_point(data=wf14T,aes(x=age,y=tl),size=2,alpha=0.1) +
  geom_line(data=preds,aes(x=age,y=fit),linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,age>=0,age<=11),aes(x=age,y=fit),linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  theme(panel.grid.minor=element_blank())
```

&nbsp;

# Model Fit with Confidence Band
The main reason for introducing the idea of constructing a graphic from predicted values is that it allows for the opportunity to add confidence and prediction bands around the fitted model line (@fig-vbfit4a).

Creation of this plot requires modifying the data frame of predicted mean lengths at age with confidence (or prediction) intervals for the mean length at each age. As mentioned previously, constructing these intervals is not straightforward with non-linear models. However, confidence (or prediction) intervals can be estimated with Taylor series approximations as implemented in `predFit()` of `investr`.^[Use of `::` here allows `predFit()` from `investr` to be used without loading all of `investr`.] `predFit()` requires the saved `nls()` object as its first argument, a data frame of ages over which to make predictions as the second argument, and either `interval="confidence"` for confidence intervals or `interval="prediction"` for prediction intervals.

```{r}
preds <- data.frame(age=ages,
                    investr::predFit(fit0,data.frame(age=ages),
                                     interval="confidence"))
headtail(preds)
```

A confidence band for mean lengths at age is added to the plot with `geom_ribbon()` where the lower part of the ribbon is at the lower confidence values (i.e., `ymin=lwr`) and the upper part is at the upper confidence value (i.e., `ymax=upr`).^[Add `geom_ribbon()` first so that it is behind the points and model lines.] `fill=` gives the color of the enclosed ribbon.

```{r}
#| label: fig-vbfit4a
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014 with a 95% confidence band. The dashed line shows the model fit outside the range of observed ages.
ggplot() + 
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr),fill="gray80") +
  geom_point(data=wf14T,aes(y=tl,x=age),size=2,alpha=0.1) +
  geom_line(data=preds,aes(x=age,y=fit),linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,age>=0,age<=11),aes(x=age,y=fit),linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  theme(panel.grid.minor=element_blank())
```

&nbsp;

# Add Equation to Plot
The following function can be used to extract the model coefficients from an `nls()` object and place them into a "plotmath" format to be added to the `ggplot` graph.

```{r}
makeVBEqnLabel <- function(fit,digits=c(1,3,3)) {
  # Isolate coefficients (and control decimals)
  cfs <- coef(fit)
  Linf <- formatC(cfs[["Linf"]],format="f",digits=digits[1])
  K <- formatC(cfs[["K"]],format="f",digits=digits[2])
  # Handle t0 differently because of minus in the equation
  t0 <- cfs[["t0"]]
  sgn <- ifelse(t0<0,"+","-")
  t0 <- formatC(abs(t0),format="f",digits=digits[3])
  # Put together and return
  paste0("TL=='",Linf,"'~bgroup('[',1-e^{-'",K,"'~(age",sgn,"'",t0,"')},']')")
}
```

&nbsp;

:::{.callout-note}
The function above was modified on 14-Jun-23 to correct an issue with `plotmath` dropping trailing zeroes in the rounded coefficient values. For example a K of 0.250 would be printed as 0.25 when the string returned from `makeVBEqnLabel()` was parsed in `annotate()` below. The correction follows the suggestion in [this StackOverflow post](https://stackoverflow.com/questions/15397789/keeping-trailing-zeroes-with-plotmath).
:::

&nbsp;

The object returned from this function can be added to the `ggplot` graph with `annotate()` as shown below.^[The `x=`, `y=`, `hjust=`, and `vjust=` arguments are used to position and justify the text and may take some trial-and-error to get what you want.]

```{r}
#| label: fig-vbfit4
#| fig.cap: Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014 with a 95% confidence band. The dashed line shows the model fit outside the range of observed ages.
ggplot() + 
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr),fill="gray80") +
  geom_point(data=wf14T,aes(y=tl,x=age),size=2,alpha=0.1) +
  geom_line(data=preds,aes(x=age,y=fit),linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,age>=0,age<=11),aes(x=age,y=fit),linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  theme(panel.grid.minor=element_blank()) +
  annotate(geom="text",label=makeVBEqnLabel(fit0),parse=TRUE,
           size=4,x=Inf,y=-Inf,hjust=1.1,vjust=-0.5)
```

:::{.callout-warning}
The large parentheses created by `bgroup` in the equation will not render properly under Windows using R v4.2.2. I posted about this [on StackOverlow](https://stackoverflow.com/questions/74738827/bgroup-does-not-render-properly-on-ggplot) and was told that it was a Windows-only bug in v4.2.2. It has been fixed in v4.2.3 under which this post was rendered.
:::

```{r}
#| echo: false
#| fig.show: "hide"
#| results: "hide"
# This is used as a work-around for creating a preview image. See the
#   discussion at https://github.com/quarto-dev/quarto-cli/issues/2042
png("preview.png",width=1000,height=500,units="px",
    bg="transparent",res=216)
ggplot() + 
  geom_ribbon(data=preds,aes(x=age,ymin=lwr,ymax=upr),fill="gray90") +
  geom_point(data=wf14T,aes(y=tl,x=age),size=2,alpha=0.1) +
  geom_line(data=preds,aes(x=age,y=fit),linewidth=1,linetype="dashed") +
  geom_line(data=filter(preds,age>=0,age<=11),aes(x=age,y=fit),linewidth=1) +
  scale_y_continuous(name="Total Length (mm)",limits=c(0,700)) +
  scale_x_continuous(name="Age (years)",breaks=0:11) +
  theme(panel.grid.minor.x=element_blank(),
        aspect.ratio=1) +
  annotate(geom="text",label=makeVBEqnLabel(fit0),parse=TRUE,
           size=4,x=Inf,y=-Inf,hjust=1.1,vjust=-0.5)
dev.off()
```
