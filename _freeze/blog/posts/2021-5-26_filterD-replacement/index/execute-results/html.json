{
  "hash": "5d8a4ebfc03e665654ebcd9d501ec381",
  "result": {
    "markdown": "---\ntitle: Replace filterD()\ndescription: An alternative to `filterD()` which was removed from `FSA`.\nauthor: Derek H. Ogle\ndate: 5/26/2021\nimage: preview.png\ncategories:\n  - FSA\n  - Data Wrangling\n---\n\n\n:::{.callout-note}\nThe following packages are loaded for use below.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)  ## for filter()\n```\n:::\n\n\n:::{.callout-note}\nSome functions illustrated below were in the `FSA` package but have now been removed and put into the non-released `FSAmisc` package that I maintain. These functions are used below **only** to show what could be done in older versions of `FSA` but should now be done as described in this post. **DO NOT USE any of the functions below that begin with `FSAmisc::`.**\n:::\n\n&nbsp;\n\nWe deprecated `filterD()` from FSA v0.9.0 and fully removed it by the start of 2022. `filterD()` was an attempt to streamline the process of using `filter()` (from `dplyr`) followed by `droplevels()` to remove levels of a factor variable that no longer existed in the filtered data frame.\n\nFor example, consider the very simple data frame below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nd <- data.frame(tl=runif(6,min=100,max=200),\n                spec=factor(c(\"LMB\",\"LMB\",\"SMB\",\"BG\",\"BG\",\"BG\")))\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|          tl spec\n#R|  1 163.9865  LMB\n#R|  2 196.6884  LMB\n#R|  3 156.8377  SMB\n#R|  4 190.3749   BG\n#R|  5 191.2181   BG\n#R|  6 100.4647   BG\n```\n:::\n:::\n\n\nNow suppose that this data frame is reduced to just Bluegill.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndbg <- d |>\n  filter(spec==\"BG\")\n```\n:::\n\n\nA quick frequency table of species caught shows that levels for species that no longer exist in the data frame are maintained.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nxtabs(~spec,data=dbg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  spec\n#R|   BG LMB SMB \n#R|    3   0   0\n```\n:::\n:::\n\n\nThis same \"problem\" occurs when using `subset()` from base R.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndbg <- subset(d,spec==\"BG\")\nxtabs(~spec,data=dbg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  spec\n#R|   BG LMB SMB \n#R|    3   0   0\n```\n:::\n:::\n\n\nThese \"problems\" can be eliminated by submitting the new data frame to `drop.levels()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndbg2 <- droplevels(dbg)\nxtabs(~spec,data=dbg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  spec\n#R|  BG \n#R|   3\n```\n:::\n:::\n\n\n`filterD()` was a simple work-around that eliminated this second step and was useful for helping students who were just getting started with R.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndbg3 <- FSAmisc::filterD(d,spec==\"BG\")\nxtabs(~spec,data=dbg3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  spec\n#R|  BG \n#R|   3\n```\n:::\n:::\n\n\nHowever, this was a hacky solution to a simple problem. Thus, we deprecated and subsequently removed `filterD()` from `FSA`. Thus, please use `droplevels()` (or `fct_drop()` from `forcats`) after using `filter()` to accomplish the same task of the defunct `filterD()`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}