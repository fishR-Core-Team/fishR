{
  "hash": "61499fb6db6c2172dbb2bef6a64b0ea3",
  "result": {
    "markdown": "---\ntitle: Replace compSlopes() with emtrends()\ndescription: Using `emtrends()` from `emmeans` as an alternative to `compSlopes()` which was removed from `FSA`.\nauthor: Derek H. Ogle\ndate: 5/11/2021\nimage: preview.png\ncategories:\n  - FSA\n  - emmeans\n---\n\n\n:::{.callout-note}\nThe following packages are loaded for use below.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)    ## for filter(), mutate()\nlibrary(emmeans)  ## for emtrends()\n```\n:::\n\n\n:::{.callout-warning}\nSome functions illustrated below were in the `FSA` package but have now been removed and put into the non-released `FSAmisc` package that I maintain. These functions are used below **only** to show what could be done in older versions of `FSA` but should now be done as described in this post. **DO NOT USE any of the functions below that begin with `FSAmisc::`.** \n:::\n\n&nbsp;\n\n# Introduction\n`compSlopes()` in `FSA` prior to v0.9.0 was used to statistically compare slopes for all pairs of groups in an indicator/dummy variable regression (IVR). However, the excellent `emtrends()` in `emmmeans` is a more general and strongly principled function for this purpose. As such, `compSlopes()` was removed from `FSA` in early 2022. The purpose of this post is to demonstrate how to use `emtrends()` for the same purpose for which `compSlopes()` was used.\n\n:::{.callout-important}\nThe results from `compSlopes()` and `emtrends()` will not be identical because they use different methods to correct for multiple comparisons when comparing pairs of slopes.\n:::\n\n&nbsp;\n\n# Example Data\nExamples below use the `Mirex` data set from `FSA`, which contains the concentration of mirex in the tissue and the body weight of two species of salmon (`chinook` and `coho`) captured in six years. The `year` variable is converted to a factor for modeling purposes. To keep the presentation simple, data from only three years will be used here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(Mirex,package=\"FSA\")\nMirex <- Mirex |>\n  filter(year>1990) |>\n  mutate(year=factor(year))\nhead(Mirex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    year weight mirex species\n#R|  1 1992    1.9  0.10    coho\n#R|  2 1992    2.0  0.09    coho\n#R|  3 1992    2.4  0.12 chinook\n#R|  4 1992    2.6  0.15    coho\n#R|  5 1992    7.5  0.13 chinook\n#R|  6 1992    7.9  0.18    coho\n```\n:::\n:::\n\n\nThe `lm()` below fits the IVR to determine if the relationship between mirex concentration and weight of the salmon differs by year.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm1 <- lm(mirex~weight*year,data=Mirex)\n```\n:::\n\n\nThe `weight:year` interaction term p-value suggests that the slopes (i.e., relationship between mirex concentration and salmon weight) differs among some pair(s) of the three years.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nanova(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  Analysis of Variance Table\n#R|  \n#R|  Response: mirex\n#R|              Df   Sum Sq  Mean Sq F value    Pr(>F)    \n#R|  weight       1 0.115886 0.115886 30.6459 1.615e-06 ***\n#R|  year         2 0.205825 0.102912 27.2149 2.028e-08 ***\n#R|  weight:year  2 0.042176 0.021088  5.5767   0.00694 ** \n#R|  Residuals   44 0.166385 0.003781                      \n#R|  ---\n#R|  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe next step is to determine which pair(s) of slopes differ significantly, which was the purpose of `compSlopes()` and is the purpose of `emtrends()`.\n\n&nbsp;\n\n# What `compSlopes()` Did\nThe procedure used by `compSlopes()` to compare slopes is described in more detail [here](http://derekogle.com/IFAR/supplements/weightlength/index.html). `compSlopes()` was simple in that it onl6 required the saved `lm()` object as an argument and its returned results should be assigned to an object for further examaination.^[`compSlopes()` had a `print()` function for nicely printing the results. However, here we will look at each component separately to ease comparison with the `emtrends()` results.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncsfsa <- FSAmisc::compSlopes(lm1)\n```\n:::\n\n\nThe `$comparisons` component in the `compSlopes()` object contained the results from comparing all pairs of slopes. Each paired comparison was a row in these results with the groups compared under `comparison`, the differences in sample slopes under `diff`, 95% confidence intervals for the difference in slopes under `95% LCI` and `95% UCI`, and unadjusted and adjusted (for multiple comparisons) p-values for the hypothesis test comparing the slopes under `p.unadj` and `p.adj`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncsfsa$comparisons\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    comparison     diff  95% LCI  95% UCI p.unadj   p.adj\n#R|  1  1996-1992 -0.01428 -0.02581 -0.00275 0.01638 0.03276\n#R|  2  1999-1992 -0.02267 -0.03668 -0.00867 0.00214 0.00642\n#R|  3  1999-1996 -0.00839 -0.02020  0.00341 0.15895 0.15895\n```\n:::\n:::\n\n\nFor example, these results suggest that the slopes for 1996 and 1992 ARE statistically different (first row), but the slopes for 1999 and 1996 are NOT statistically different (last row).\n\nThe `$slope` component in the `compSoloes()` object contained results specific to each slope. The groups were under `level`, sample slopes under `slopes`, 95% confidence intervals for the slopes under `95% LCI` and `95% UCI`, and unadjusted and adjusted p-values for the test if the slope is different from 0 under `p.unadj` and `p.adj`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncsfsa$slope\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    level  slopes  95% LCI 95% UCI p.unadj   p.adj\n#R|  3  1999 0.00386 -0.00620 0.01393 0.44342 0.44342\n#R|  2  1996 0.01225  0.00609 0.01842 0.00024 0.00048\n#R|  1  1992 0.02653  0.01679 0.03628 0.00000 0.00000\n```\n:::\n:::\n\n\nFor example, the slope for 1992 (last row) appears to be significantly different from 0 and may be between 0.01679 and 0.03628.\n\n&nbsp;\n\n# What `emtrends()` Does\nSimilar results can be obtained with `emtrends()` from `emmeans` using the fitted `lm()` object as the first argument, a `specs=` argument with `pairwise~` followed by the name of the factor variable from the `lm()` model (`year` in this case), and `var=` followed by the name of the covariate from the `lm()` model (`weight` in this case), which **must** be in quotes. The results should be assigned to an object so that specific results can be extracted.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncs <- emtrends(lm1,specs=pairwise~year,var=\"weight\")\n```\n:::\n\n\nThe object saved from `emtrends()` is then given as the first argument to `summary()`, which also requires `infer=TRUE` if you would like p-values to be calculated.^[`emmeas` does not compute p-values by default.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncss <- summary(cs,infer=TRUE)\n```\n:::\n\n\nThe `$contrasts` component in this saved object contains the results for comparing all pairs of slopes. Each paired comparison is a row with the groups compared under `contrasts`, the difference in sample slopes under `diff`, the standard error of the difference in sample slopes under `SE`, the degrees-of-freedom under `df`, a 95% confidence interval for the difference in slopes under `lower.CL` and `upper.CL`, and the t test statistic and p-value adjusted for multiple comparisons for testing a difference in slopes under `t.ratio` and `p.value`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncss$contrasts\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   contrast            estimate      SE df  lower.CL upper.CL t.ratio p.value\n#R|   year1992 - year1996  0.01428 0.00572 44  0.000403   0.0282   2.496  0.0425\n#R|   year1992 - year1999  0.02267 0.00695 44  0.005815   0.0395   3.262  0.0059\n#R|   year1996 - year1999  0.00839 0.00586 44 -0.005813   0.0226   1.433  0.3331\n#R|  \n#R|  Confidence level used: 0.95 \n#R|  Conf-level adjustment: tukey method for comparing a family of 3 estimates \n#R|  P value adjustment: tukey method for comparing a family of 3 estimates\n```\n:::\n:::\n\n\nComparing these results to the `$comparison` component from `compSlopes()` shows that the difference in sample slopes are the same, but that the confidence interval values and p-values are slightly different. Again, this is due to `emtrends()` and `compSlopes()` using different methods of adjusting for multiple comparisons. These differences did not result in different conclusions in this case, but they could, especially if the p-values are near the rejection criterion.\n\nThe `$emtrends` component contains results for each slope with the groups under the name of the factor variable (`year` in this example), the sample slopes under `xxx.trend` (where `xxx` is replaced with the name of the covariate variable, `weight` in this example), standard errors of the sample slopes under `SE`, degrees-of-freedom under `df`, 95% confidence intervals for the slope under `lower.CL` and `upper.CL`, and t test statistics and p-values adjusted for multiple comparisons for testing that the slope is not equal to zero under `t.ratio` and `p.adj`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncss$emtrends\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   year weight.trend      SE df lower.CL upper.CL t.ratio p.value\n#R|   1992      0.02653 0.00483 44  0.01679   0.0363   5.489  <.0001\n#R|   1996      0.01225 0.00306 44  0.00609   0.0184   4.004  0.0002\n#R|   1999      0.00386 0.00499 44 -0.00620   0.0139   0.773  0.4434\n#R|  \n#R|  Confidence level used: 0.95\n```\n:::\n:::\n\n\nHere the results match exactly with those in the `$slopes` component of `compSlopes()`.\n\n&nbsp;\n\n## Conclusion\n`emtrends()` in `emmeans` provides a more general solution to comparing multiple slopes than what was used in `compSlopes()` in `FSA` prior to v0.9.0. As `compSlopes()` was removed from FSA in 2022, you should now use `emtrends()` for this purpose.\n\n`emmeans` has extensive vignettes that further explain its use. Please see [this discussion](https://cran.r-project.org/web/packages/emmeans/vignettes/interactions.html#covariates) for the use case described in this post. Their [\"Basics\" vignette](https://cran.r-project.org/web/packages/emmeans/vignettes/basics.html) is also useful.\n\nIn the [next post](../2021-5-12_compIntercepts-replacement/) I will demonstrate how to use `emmeans()` from the `emmeans` package to replace `compIntercepts()`, which was also removed from `FSA`.\n\n:::{.callout-note}\nThis change to `FSA` does not affect anything in @ogleIntroductoryFisheriesAnalyses2016. However, the use of `compSlopes()` in [this supplement](http://derekogle.com/IFAR/supplements/weightlength/index.html) to @ogleIntroductoryFisheriesAnalyses2016 will no longer work as described and will need to use `emtrends()` instead.\n:::\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}