{
  "hash": "7ea3c8e54b753f0a094145c0155749fb",
  "result": {
    "markdown": "---\ntitle: von Bertalanffy Growth Plots I\ndescription: How to plot one von Bertalanffy growth model with data.\nauthor: Derek H. Ogle\ndate: 12/31/2019\nimage: preview.png\ncategories:\n  - Age\n  - Growth\n  - Size\n  - ggplot2\nknitr: \n  opts_chunk:\n    fig.width: 4\n    fig.height: 4\n---\n\n\n:::{.callout-note}\nThe following packages are loaded for use below. The data are also from `FSAdata`, which is not loaded below. I also set the default `ggplot` theme to `theme_bw()` for a classic \"black-and-white\" plot (rather than the default plot with a gray background).\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(FSA)     # for vbFuns(), vbStarts(), confint.bootCase(), headtail()\nlibrary(car)     # for Boot()\nlibrary(dplyr)   # for filter(), mutate()\nlibrary(ggplot2)\ntheme_set(theme_bw())\n```\n:::\n\n\n&nbsp;\n\n# Introduction\nThe most common questions that I receive through the **fishR** website are related to fitting a von Bertalanffy growth function (VBGF) to data and viewing the results. In this post, I briefly demonstrate how to fit a VBGF to a single group of data and then provide several options for how to view the fit of the function to those data.\n\nIn this post I will use data on the lengths and ages of Lake Erie Walleye (*Sander vitreus*) captured during October-November, 2003-2014. These data are available in [`FSAdata`](https://fishr-core-team.github.io/FSAdata/) package and formed many of the examples in @ogle_growth_2017. My primary interest here is in the `tl` (total length in mm) and `age` variables^[See more details about the data](https://fishr-core-team.github.io/FSAdata/reference/WalleyeErie2.html).]. I focus on female Walleye from location \"1\" captured in 2014 in this example.^[For succinctness, I also removed `year` and `sex` as they only had one category after filtering and three variables related to the `loc`ation of capture.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(WalleyeErie2,package=\"FSAdata\")\nwf14T <- WalleyeErie2 |>\n  filter(year==2014,sex==\"female\",loc==1) |>\n  select(-year,-sex,-setID,-loc,-grid)\nheadtail(wf14T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       tl    w      mat age\n#R|  1   445  737 immature   2\n#R|  2   528 1571   mature   4\n#R|  3   380  506 immature   1\n#R|  323 488 1089 immature   2\n#R|  324 521 1408   mature   3\n#R|  325 565 1745   mature   3\n```\n:::\n:::\n\n\n&nbsp;\n\n# Fitting the VBGF\nMethods for fitting a von Bertalannfy growth function (VBGF) are detailed in @ogleIntroductoryFisheriesAnalyses2016 and @ogle_growth_2017. Thus, this methodology will only be briefly explained here.\n\nA function for the typical VBGF is constructed with `vbFuns()`.^[Other parameterizations of the VBGF can be used with `param=` in `vbFuns()` as described in [its documentation](https://fishr-core-team.github.io/FSA/reference/growthModels.html).]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( vb <- vbFuns(param=\"Typical\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  function (t, Linf, K = NULL, t0 = NULL) \n#R|  {\n#R|      if (length(Linf) == 3) {\n#R|          K <- Linf[[2]]\n#R|          t0 <- Linf[[3]]\n#R|          Linf <- Linf[[1]]\n#R|      }\n#R|      Linf * (1 - exp(-K * (t - t0)))\n#R|  }\n#R|  <bytecode: 0x000002849eaee880>\n#R|  <environment: 0x000002849dcf20e8>\n```\n:::\n:::\n\n\nSome of the methods below use the fact that the three parameters of the typical VBGF ($L_{\\infty}$, $K$, $t_{0}$) can be given to this function separately (in that order) or as a vector (still in that order). For example, both lines below can be used to predict the mean length for an age-3 fish with the given VBGF parameters.^[The paramters could be given in a different order but would need to be named; e.g., `vb(3,t0=-0.5,K=0.3,Linf=300)`.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvb(3,300,0.3,-0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 195.0187\n```\n:::\n\n```{.r .cell-code}\ntmp <- c(300,0.3,-0.5) \nvb(3,tmp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 195.0187\n```\n:::\n:::\n\n\nReasonable starting values for the optimization algorithm may be obtained with `vbStarts()`, where the first argument is a formula of the form `lengths~ages` where `lengths` and `ages` are replaced with the actual variable names that contain the observed lengths and ages, respectively, and `data=` is set to the data frame that contains those variables.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( f.starts <- vbStarts(tl~age,data=wf14T) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  $Linf\n#R|  [1] 645.2099\n#R|  \n#R|  $K\n#R|  [1] 0.3482598\n#R|  \n#R|  $t0\n#R|  [1] -1.548925\n```\n:::\n:::\n\n\nThe `nls()` function is typically used to estimate parameters of the VBGF from the observed data. The first argument is a formula that has `lengths` on the left-hand-side and the VBGF function created above on the right-hand-side. The VBGF function has the `ages` variable as its first argument and then `Linf`, `K`, and `t0` as the remaining arguments (just as they appear here). Again, the data frame with the observed lengths and ages is given to `data=` and the starting values derived above are given to `start=`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nf.fit <- nls(tl~vb(age,Linf,K,t0),data=wf14T,start=f.starts)\n```\n:::\n\n\nThe parameter estimates are extracted from the saved `nls()` object with `coef()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef(f.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        Linf          K         t0 \n#R|  648.208364   0.361540  -1.283632\n```\n:::\n:::\n\n\nBootstrapped confidence intervals for the parameter estimates are computed by giving the saved `nls()` object to `Boot()` and giving the saved `Boot()` object to `confint()`.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_4b206d0c4b984d7bb7e1327865948f36'}\n\n```{.r .cell-code}\nf.boot1 <- Boot(f.fit)  # Be patient! Be aware of some non-convergence\nconfint(f.boot1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  Bootstrap bca confidence intervals\n#R|  \n#R|             2.5 %      97.5 %\n#R|  Linf 619.2082363 682.2018777\n#R|  K      0.3049448   0.4290073\n#R|  t0    -1.5180162  -1.0576519\n```\n:::\n:::\n\n\n&nbsp;\n\n# Simple Model Fit with `stat_function()`\nIn these examples, all \"layers\" of the plot will use the same data. Thus, `data=` and the `aes()`thetic mappings are defined in `ggplot()`. Observed lengths and ages are added to the plot with `geom_point()`. The points in @fig-vbfit1 were made slightly larger than the default (with `size=`) and also with a fairly low transparency value to handle considerable over-plotting. The `scale_y_continuous()` and `scale_x_continuous()` functions are used to control aspects of y- and x-axes, respectively. Labels for axes are given in `name=`, minimum and maximum limits for the asis are in `limits=`, and specific major breaks for the axis are in `breaks=`.^[`seq(0,700,100)` makes a vector of numbers from 0 to 700 in increments of 100 and `0:11` makes a vector of integers from 0 to 11.] Finally, the fitted line is added to the plot with `stat_function()` using the VBGF function created above in `fun=` and a list of arguments to this function in `args=`.^[The usage here exploits the fact that all three parameters to the VBGF can be given in the first parameter argument, `Linf=`.] In @fig-vbfit1 I made the model line a little wider than the default. Finally the `theme()` was modified to remove the minor grid lines from the x-axis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=wf14T,aes(x=age,y=tl)) +\n  geom_point(size=2,alpha=0.1) +\n  scale_y_continuous(name=\"Total Length (mm)\",\n                     limits=c(0,700),breaks=seq(0,700,100)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  stat_function(fun=vb,args=list(Linf=coef(f.fit)),linewidth=1) +\n  theme(panel.grid.minor.x=element_blank())\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014.](index_files/figure-html/fig-vbfit1-1.png){#fig-vbfit1 fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\nThe model line can be shown outside the range of the data by including minimum and maximum values over which to evaluate the function in `xlim=` in `stat_function()`. In @fig-vbfit1a I add a dashed line for the model that includes evaluation at ages outside the observed range of ages (first `stat_function()`) and the plotted the model line for observed ages on top of that (second `stat_function()`). This gives the impression of using a dashed line for the ages that would be extrapolated.^[I would change the axis expansion factors here to clean this plot up a bit.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=wf14T,aes(x=age,y=tl)) +\n  geom_point(size=2,alpha=0.1) +\n  scale_y_continuous(name=\"Total Length (mm)\",limits=c(0,700)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  stat_function(fun=vb,args=list(Linf=coef(f.fit)),\n                xlim=c(-1,12),linewidth=1,linetype=\"dashed\") +\n  stat_function(fun=vb,args=list(Linf=coef(f.fit)),linewidth=1) +\n  theme(panel.grid.minor.x=element_blank())\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014. The dashed line shows the model fit outside the range of observed ages.](index_files/figure-html/fig-vbfit1a-1.png){#fig-vbfit1a fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# Simple Model Fit with `geom_smooth()`\n@fig-vbfit1 can also be produced using `geom_smooth()` (@fig-vbfit2), which can use `nls()` to fit the VBGF \"behind the scenes.\" For this purpose `geom_smooth()` requires that `method=` be `\"nls\"` and that `se=FALSE`.^[`se=FALSE` is required because this argument is not implemented in `nls()`.] In addition,  `methods.args=` takes required arguments for fitting the VBGF in `nls()`. Minimum required arguments for fitting the VBGF are the VBGF `formula=` and `start=`ing values as shown for `nls()` in the previous section.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=wf14T,aes(x=age,y=tl)) +\n  geom_point(size=2,alpha=0.1) +\n  scale_y_continuous(name=\"Total Length (mm)\",limits=c(0,700)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  geom_smooth(method=\"nls\",se=FALSE,\n              method.args=list(formula=y~vb(x,Linf,K,t0),start=f.starts),\n              color=\"black\",linewidth=1) +\n  theme(panel.grid.minor.x=element_blank())\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014.](index_files/figure-html/fig-vbfit2-1.png){#fig-vbfit2 fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# Simple Model Fit with Predicted Values\n@fig-vbfit1 and @fig-vbfit1a can also be constructed from lengths predicted at a variety of ages \"outside\" of any `ggplot()` layers. For this to work below, a new function must be created that has **only** the `nls()` object as an argument. This requires a bit of sleight-of-hand where we will assume that the ages to make the predictions at are in a vector called `ages`. The function is created below and is called `predict2()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredict2 <- function(x) predict(x,data.frame(age=ages))\n```\n:::\n\n\nI then create a vector of ages over which the fitted model will be evaluated. In this case I will extend this range outside the observed ages (to -1 and 12) and make the sequence in increments of 0.1.^[Use smaller increments to make the line produced further below more smooth.] The mean length at each of these ages is then predicted with the function just created. Both results are assigned to a data frame called `preds1` below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nages <- seq(-1,12,0.1)\npred1 <- data.frame(age=ages,\n                    plen=predict2(f.fit))\nheadtail(pred1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       age      plen\n#R|  1   -1.0  63.17547\n#R|  2   -0.9  83.94897\n#R|  3   -0.8 103.98483\n#R|  129 11.8 642.48843\n#R|  130 11.9 642.69154\n#R|  131 12.0 642.88743\n```\n:::\n:::\n\n\nThese predicted mean lengths-at-age can then be used to add a model line to a plot of observed lengths-at-age with `geom_line()`. However, because the observed and predicted data are in different data frames, the data and mapped aesthetics should be declared within the appropriate `geom`s rather than within `ggplot()`. For example, `geom_point()` is used below to add the observed data to the plot and `geom_line()` is used below to add the modeled line. Note below that separate `geom_line()`s are used to show the modeled line over extrapolated and observed ages.^[Also note the use of `filter()` to reduce the predicted lengths-at-age to the observed ages.] The results in @fig-vbfit3a reproduce @fig-vbfit1a.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data=wf14T,aes(x=age,y=tl),size=2,alpha=0.1) +\n  geom_line(data=pred1,aes(x=age,y=plen),linewidth=1,linetype=\"dashed\") +\n  geom_line(data=filter(pred1,age>=0,age<=11),aes(x=age,y=plen),linewidth=1) +\n  scale_y_continuous(name=\"Total Length (mm)\",limits=c(0,700)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  theme(panel.grid.minor.x=element_blank())\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014. The dashed line shows the model fit outside the range of observed ages.](index_files/figure-html/fig-vbfit3a-1.png){#fig-vbfit3a fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# Model Fit with Confidence Region\nThe main reason for introducing the idea of constructing a graphic from predicted values is that it will give us the opportunity to add a confidence ribbon to the graphic. Bootstrapped samples of predictions of mean length at each age given the VBGF are constructed by giving `Boot()` (from `car`) the saved `nls()` object AND the new prediction function (created above) in `f=`. The object returned from `Boot()` is then given to `confint()` to extract the confidence intervals for the mean length at each age. These results are then wrapped into a data frame with the vector of ages and the predicted mean lengths at each age.^[The code below is for all ages between -1 and 12 in increments of 0.1 as `ages` was created above.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Be patient! Be aware of some non-convergence\npred1 <- data.frame(ages,predict2(f.fit),\n                    confint(Boot(f.fit,f=predict2)))\nnames(pred1) <- c(\"age\",\"plen\",\"LCI\",\"UCI\")\nheadtail(pred1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        age      plen       LCI      UCI\n#R|  V1   -1.0  63.17547  13.41976 102.2830\n#R|  V2   -0.9  83.94897  38.83650 119.4368\n#R|  V3   -0.8 103.98483  63.37520 136.0909\n#R|  V129 11.8 642.48843 617.53271 671.7810\n#R|  V130 11.9 642.69154 617.53281 672.1099\n#R|  V131 12.0 642.88743 617.63552 672.4580\n```\n:::\n:::\n\n\nA confidence band for the mean lengths at each age is then added to the plot with `geom_ribbon()`, noting the use of `ymin=LCI` and `ymax=UCI`. The `fill=` will be the color of the enclosed ribbon. I added `geom_ribbon()` first so that it would sit behind the points and model lines. The results is shown in @fig-vbfit4a.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() + \n  geom_ribbon(data=pred1,aes(x=age,ymin=LCI,ymax=UCI),fill=\"gray80\") +\n  geom_point(data=wf14T,aes(y=tl,x=age),size=2,alpha=0.1) +\n  geom_line(data=pred1,aes(x=age,y=plen),linewidth=1,linetype=\"dashed\") +\n  geom_line(data=filter(pred1,age>=0,age<=11),aes(x=age,y=plen),linewidth=1) +\n  scale_y_continuous(name=\"Total Length (mm)\",limits=c(0,700)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  theme(panel.grid.minor.x=element_blank())\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014 with a 95% confidence band. The dashed line shows the model fit outside the range of observed ages.](index_files/figure-html/fig-vbfit4a-1.png){#fig-vbfit4a fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# Add Equation to Plot\nThe following function can be used to extract the model coefficients from `nls()` object and place them into a \"plotmath\" format to be added to the `ggplot` graph.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmakeVBEqnLabel <- function(fit,digits=c(1,3,3)) {\n  # Isolate coefficients (and control decimals)\n  cfs <- coef(fit)\n  Linf <- formatC(cfs[[\"Linf\"]],format=\"f\",digits=digits[1])\n  K <- formatC(cfs[[\"K\"]],format=\"f\",digits=digits[2])\n  # Handle t0 differently because of minus in the equation\n  t0 <- cfs[[\"t0\"]]\n  t0 <- paste0(ifelse(t0<0,\"+\",\"-\"),formatC(abs(t0),format=\"f\",digits=digits[3]))\n  # Put together and return\n  paste0(\"TL==\",Linf,\"~bgroup('[',1-e^{-\",K,\"~(age\",t0,\")},']')\")\n}\n```\n:::\n\n\n&nbsp;\n\nThe object returned from this function can be added to the `ggplot` graph with `annotate()` as shown below.^[The `x=`, `y=`, `hjust=`, and `vjust=` arguments are used to position and justify the text and may take some trial-and-error to get what you want.]\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() + \n  geom_ribbon(data=pred1,aes(x=age,ymin=LCI,ymax=UCI),fill=\"gray80\") +\n  geom_point(data=wf14T,aes(y=tl,x=age),size=2,alpha=0.1) +\n  geom_line(data=pred1,aes(x=age,y=plen),linewidth=1,linetype=\"dashed\") +\n  geom_line(data=filter(pred1,age>=0,age<=11),aes(x=age,y=plen),linewidth=1) +\n  scale_y_continuous(name=\"Total Length (mm)\",limits=c(0,700)) +\n  scale_x_continuous(name=\"Age (years)\",breaks=0:11) +\n  theme(panel.grid.minor.x=element_blank()) +\n  annotate(geom=\"text\",label=makeVBEqnLabel(f.fit),parse=TRUE,\n           size=4,x=Inf,y=-Inf,hjust=1.1,vjust=-0.5)\n```\n\n::: {.cell-output-display}\n![Fit of typical von Bertalanffy growth function to female Lake Erie Walleye in 2014 with a 95% confidence band. The dashed line shows the model fit outside the range of observed ages.](index_files/figure-html/fig-vbfit4-1.png){#fig-vbfit4 fig-align='center' width=384}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}