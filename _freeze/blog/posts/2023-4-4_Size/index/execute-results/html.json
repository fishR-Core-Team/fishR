{
  "hash": "d668445ce5aae3080a9566d61967f255",
  "result": {
    "markdown": "---\ntitle: How Does Size Work in ggplot2\ndescription: Demonstration of size= and linewidth= in ggplot2 objects.\nauthor: Derek H. Ogle\ndate: 4/3/2023\nimage: preview.png\ncategories:\n  - ggplot2\n  - size\n  - annotations\n---\n\n\n# Introduction\nI often struggle with \"size\" of ggplot objects. It has seemed that `size=` behaved differently in certain situations and was unrelated to `linewidth=`. I often just fiddle with the values until I get something that looks like I want. Dissatisfied with this approach, I explored the idea of \"size\" in `ggplot2` further.\n\nThe rest of this post is split into two main sections. In [the first](#aesthetic-specification-documentation), I describe a confusion that I had from reading the `ggplot2` documentation with respect to the size of text, points, and lines. That section finishes with a summary of my findings with respect to this confusion, which is largely a summary of one answer I received on StackOverflow (as of 1-Apr-2023), and a possible solution which seems to address my confusion. In [the second section](#setting-sizes), I discuss how to set the \"size\" for text, lines, and points, and what these sizes mean.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n&nbsp;\n\n# Aesthetic Specification Documentation\nAesthetic specifications are defined in [this online documentation](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html). Below I copied some of the text from that documentation as it appeared on 1-Apr-2023. Under [linewidth](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#linewidth) the documentation reads:\n\n> Due to a historical error, the unit of linewidth is roughly 0.75 mm. Making it exactly 1 mm would change a very large number of existing plots, so weâ€™re stuck with this mistake.\n\nUnder [Font size](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#font-size) the documentation reads:\n\n> The `size` of text is measured in mm. This is unusual, but makes the size of text consistent with the size of lines and points. Typically you specify font size using points (or pt for short), where 1 pt = 0.35mm. `ggplot2` provides this conversion factor in the variable `.pt`, so if you want to draw 12pt text, set `size = 12 / .pt`.\n\nUnder [Colour and fill](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#colour-and-fill-1) for points the documentation reads:\n\n> Note that shapes 21-24 have both stroke `colour` and a `fill`. The size of the filled part is controlled by `size`, the size of the stroke is controlled by `stroke`. Each is measured in mm, and the total size of the point is the sum of the two.\n\nMy read of these portions of the documentation leads me to conclude that using the same value for `linewidth=` for a line and `size=` for a point and text should result in either (a) all three being the same size but scaled to approximately 0.75 mm rather than 1 mm or (b) the point and text being the same size and scaled to 1 mm and the line being smaller and scaled to 0.75 mm.\n\nI tested these expectations with the plot below using a \"base size\" of 24 such that\n\n- The gray text used `size=24` in `geom_text()`.\n- The blue-and-red point used `size=12` and `stroke=12` in `geom_point()`.\n- The orange point used `size=24` and `stroke=0` in `geom_point()`.\n- The green point used `size=0` and `stroke=24` in `geom_point()`.\n- The green-and-orange point use `size=12` and `stroke=12*0.753`^[More about 0.753 later, but note that it is \"roughly 0.75\" from the documentation for `linewidth=` shown above.] in `geom_point()`.\n\nFrom these choices and my interpretation of the documentation above, I expected the following:\n\n1. All but the green-and-orange point to be equally sized or the black line to be smaller than all but the green-and-orange point to which it would be equal in size.\n1. Regardless of the relation to the black line and the text, I expected all but the green-and-orange point to be equal in size.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nsz <- 24\ncf <- .pt/.stroke\n  \nggplot() +\n  geom_hline(yintercept=1,linewidth=sz) +\n  geom_text(data=data.frame(x=0.35,y=1,label=\"Text\"),\n            mapping=aes(x=x,y=y,label=label),\n            size=sz,color=\"gray70\") +\n  geom_point(data=data.frame(x=0.5,y=1),mapping=aes(x=x,y=y),\n             pch=21,size=sz/2,stroke=sz/2,fill=\"red\",color=\"blue\") +\n  geom_point(data=data.frame(x=0.6,y=1),mapping=aes(x=x,y=y),\n             pch=21,size=sz,stroke=0,fill=\"orange\") +\n  geom_point(data=data.frame(x=0.7,y=1),mapping=aes(x=x,y=y),\n             pch=21,size=0,stroke=sz,color=\"green\") +\n  geom_point(data=data.frame(x=0.8,y=1),mapping=aes(x=x,y=y),\n             pch=21,size=sz/2,stroke=sz/2*cf,fill=\"orange\",color=\"green\") +\n  scale_x_continuous(limit=c(0.275,0.85)) +\n  theme_void() +\n  theme(aspect.ratio=0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-doc-confusion-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFrom this, it seems like an obvious issue is related to `stroke=`. Comparing the orange (only) to the green (only) point suggests that the size\" of `stroke=` is larger than the size of `size=` such that `size=` plus `stroke=` does equal the overall size of the point, but not in a one-to-one way. For example, you can not reduce `size=` by some number of units and increase `stroke=` by the same number of units to have the same overall size of point. For example, each point below has the same sum of `size=` (first number, red fill) and `stroke=` (second number, blue).^[All overlaid on a line constructed with `linewidth=24`.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n## mostly from stefan in https://stackoverflow.com/a/75896754/1123933\ntmp <- expand.grid(size=seq(0,30,3)*2,\n                   stroke=seq(0,30,3)*2) |>\n  subset(size+stroke==sz)\n\nggplot(data=tmp,mapping=aes(x=size)) +\n  geom_hline(yintercept=1,linewidth=sz) +\n  geom_point(aes(y=1,stroke=stroke,size=size),shape=21,color=\"blue\",fill=\"red\") +\n  geom_text(mapping=aes(y=1,label=paste(size,stroke,sep=\" / \")),\n                        color=\"white\",fontface=\"bold\",size=11/.pt) +\n  scale_size_identity() +\n  scale_x_continuous(expand=expansion(mult=0.1)) +\n  theme_void() +\n  theme(aspect.ratio=0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-doc-confusion-2-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nI asked a question about all of this on [Posit Community](https://community.rstudio.com/t/units-of-linewidth/162885) and on [StackOverlow](https://stackoverflow.com/questions/75894278/how-are-size-and-linewidth-related-in-ggplot20). While responses on both platforms ultimately did not clarify the issue above, one answer on StackOverflow was instructive. There, \"Stefan\" pointed out that `size=` is converted to pts with a constant built-in to `ggplot2` as `.pt` and that `stroke=` is converted to pts with a constant built-in to `ggplot2` as `.stroke`. These two conversion constants are different.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n.pt\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 2.845276\n```\n:::\n\n```{.r .cell-code}\n.stroke\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 3.779528\n```\n:::\n:::\n\n\nInterestingly, their ratio is 0.753 which sounds like the \"roughly 0.75\" from the documentation about `linewidth=` above. \"Stefan\" went on to show in his StackOverflow answer that if you multiply the stroke value by the ratio of these two constants, which he called a \"correction factor\", that the overall size of the point will follow my expectations. This is illustrated below where each point below has the same sum of `size=` (first number, orange fill) and `stroke=` times the correction factor (second number, green).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n## mostly from stefan in https://stackoverflow.com/a/75896754/1123933\nggplot(data=tmp,mapping=aes(x=size)) +\n  geom_hline(yintercept=1,linewidth=sz) +\n  geom_point(aes(y=1,stroke=stroke*cf,size=size),\n             shape=21,color=\"green\",fill=\"orange\") +\n  geom_text(mapping=aes(y=1,label=paste0(size,\" / \",stroke,\"*cf\")),\n                        color=\"black\",fontface=\"bold\",size=11/.pt) +\n  scale_size_identity() +\n  scale_x_continuous(expand=expansion(mult=0.1)) +\n  theme_void() +\n  theme(aspect.ratio=0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-doc-confusion-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFrom this it appears to me that `size=`, `stroke=`, and `linewidth=` will provide the same size for their respective objects if `stroke=` is multiplied by the \"correction factor\" derived from the ratio of `.pt` to `.stroke`.\n\nIt is worth noting at this point that this \"issue\" of the overall size of the point may be moot in most situations as the default `size=` is 1.5 and default `stroke=` is `0.5`. Thus, the overall point will be larger than what would be expected for a `size=` plus `stroke=` of 2, but will likely not be perceptible to most eyes. That being said, you can always set `stroke=0.5*.pt/*.stroke` for default points to adjust for this issue.\n\n&nbsp;\n\n# Setting Sizes\n## Text\n### Default Sizes\nUnless modified by the user, the default \"base\" font size in most `ggplot2` themes is 11 pt, as shown below for `theme_grey()` (the default `ggplot2` theme). This can be modified with `base_size=` to the theme function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_grey()$text\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  List of 11\n#R|   $ family       : chr \"\"\n#R|   $ face         : chr \"plain\"\n#R|   $ colour       : chr \"black\"\n#R|   $ size         : num 11\n#R|   $ hjust        : num 0.5\n#R|   $ vjust        : num 0.5\n#R|   $ angle        : num 0\n#R|   $ lineheight   : num 0.9\n#R|   $ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n#R|    ..- attr(*, \"unit\")= int 8\n#R|   $ debug        : logi FALSE\n#R|   $ inherit.blank: logi TRUE\n#R|   - attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n```\n:::\n:::\n\n\nSeveral of the default font sizes for other items are based off of this base size. For example, for most themes the axis titles are the base size, the plot title is 1.2&times; larger than the base size, and the axis tick labels and facet strip labels are 0.8&times; the base size.^[I chose not to show the code by default for some of these plots because the point demonstrated by the plot is the point, not the code. However, click \"code\" if you would like to see the code.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npd <- ggplot() +\n  geom_point() +\n  scale_x_continuous(name=\"Base Font Size (11)\",\n                     limits=c(0,1),breaks=c(0,1),expand=expansion(add=0.5),\n                     labels=rep(\"0.8X Base Font Size\",2)) +\n  scale_y_continuous(name=\"Base Font Size (11)\",\n                     limits=c(0,1),breaks=c(0,1),expand=expansion(add=0.25),\n                     labels=rep(\"0.8X Base Font Size\",2)) +\n  ggtitle(\"1.2X Base Font Size\")\npd\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-default-text-sizes-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nText added to the plot with `geom_text()` is shown at the base font size by default.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npd +\n  geom_text(data=data.frame(x=0.5,y=0.5,label=\"Text at Default Base Font Size\"),\n            mapping=aes(x=x,y=y,label=label))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-default-label-size-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n### Text Label Font Sizes\n`geom_text()` has a `size=` argument for changing the size of the text. As such, you might change it to 13.2 assuming that its size would then match the size of plot title (i.e., 1.2&times;11).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npd +\n  geom_text(data=data.frame(x=0.5,y=0.5,label=\"Text at 'size=13.2'\"),\n            mapping=aes(x=x,y=y,label=label),size=13.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-default-label-issue-1-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThis clearly did not meet expectations. Why? Because the units for `size=` is **not** pts, rather it is mm. In `geom_text()` those mm units get converted to pts for displaying the text. There are a little over 72 dots (or \"pts\") per inch, which corresponds to approximately 2.835 dots per mm. Thus, `size=13.2` sets the text size at approximately 13.2&times;2.835=37.4 pts. Thus, the very large text above.\n\nThis phenomenon is also evident in the default \"size\" used in `geom_text()` shown below. Note that 3.88&times;2.835=11.0 or, approximately, the 11 pt base font size.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nGeomText$default_aes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  Aesthetic mapping: \n#R|  * `colour`     -> \"black\"\n#R|  * `size`       -> 3.88\n#R|  * `angle`      -> 0\n#R|  * `hjust`      -> 0.5\n#R|  * `vjust`      -> 0.5\n#R|  * `alpha`      -> NA\n#R|  * `family`     -> \"\"\n#R|  * `fontface`   -> 1\n#R|  * `lineheight` -> 1.2\n```\n:::\n:::\n\n\nThe exact conversion factor from mm to pts is stored in the `ggplot2` constant `.pt`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n.pt\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 2.845276\n```\n:::\n:::\n\n\nThus, to use `size=` in `geom_text()` to display text at a specific pt size, then divide the desired pt size by `.pt`. For example, the plot below uses `size=11*1.2/.pt` for the top text and `size=16/.pt` for the bottom text.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npd +\n  geom_text(data=data.frame(x=c(0.5,0.5),y=c(0.75,0.25),\n                            label=c(\"Text at 1.2X Base Font Size\",\n                                    \"Text at 16 pt Font Size\")),\n            mapping=aes(x=x,y=y,label=label),size=c(11*1.2,16)/.pt)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-default-label-issue-2-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n:::{.callout-tip}\nSet the font size in `geom_text()` or `geom_label()` to a desired point size by setting `size=` to the desired point size divided by the `ggplot2` constant in `.pt`. For example, use `size=16/.pt` to use a 16 pt font size.\n:::\n\nThe following \"chart\" gives an idea of how a particular `size=` will be converted to a pt size (on the left) and how a particular pt size corresponds to a `size=` value (on the right).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndat2 <- data.frame(sz1=3:10,\n                   pts2=c(6,8,10,11,12,14,18,24)) |>\n  dplyr::mutate(sz2=pts2/.pt,\n         pts1=sz1*.pt,\n         x1=rep(0,length(sz1)),\n         y=seq_along(sz1),\n         lbl1=glue::glue(\"size={sz1}; {round(pts1,1)} pt\"),\n         x2=rep(1,length(sz2)),\n         lbl2=glue::glue(\"{pts2} pts; size={round(sz2,1)}\"))\n\nggplot(data=dat2) +\n  geom_text(mapping=aes(x=x1,y=y,size=sz1,label=lbl1)) +\n  geom_text(mapping=aes(x=x2,y=y,size=sz2,label=lbl2)) +\n  geom_vline(xintercept=0.5,color=\"gray70\") +\n  scale_size_identity() +\n  scale_x_continuous(expand=expansion(add=0.5)) +\n  theme_classic() +\n  theme(axis.title=element_blank(),axis.text=element_blank(),\n        axis.ticks=element_blank(),axis.line=element_blank(),\n        legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/show-mm-to-pt-conversion-examples-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n### Theme-Related Font Sizes\nText related to plot titles,^[And subtitles, captions, and tags.] axis titles, axis tick labels, and facet strip labels are all modified using `element_text()` with specific arguments in `theme()`. `element_text()` has `size=` for altering the size of text. However, the units of `size=` in this element function **is** pts and is not mm. The text sizes for the plot title, axis title, and axis tick marks for a `ggplot2` object called `pd2` are modified as shown below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npd2 <- ggplot() +\n  geom_point() +\n  scale_x_continuous(name=\"16 pt Font\",\n                     limits=c(0,1),breaks=c(0,1),expand=expansion(add=0.5),\n                     labels=rep(\"12 pt Font\",2)) +\n  scale_y_continuous(name=\"18 pt Font\",\n                     limits=c(0,1),breaks=c(0,1),expand=expansion(add=0.25),\n                     labels=rep(\"11 pt Font\",2)) +\n  ggtitle(\"24 pt Font\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npd2 +\n  theme(plot.title=element_text(size=24),\n        axis.title.y=element_text(size=18),\n        axis.title.x=element_text(size=16),\n        axis.text.y=element_text(size=11),\n        axis.text.x=element_text(size=12))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-theme-text-sizes-2-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n:::{.callout-tip}\nSet the font size for `ggplot2` plot labels, axis titles, axis tick labels, and facet strip labels using `size=` in `element_text()` set equal to specific arguments related to these items in `theme()`. The values used in `size=` here is pts and, thus, do **not** need to be converted to pts.\n:::\n\n&nbsp;\n\n## Lines\nObjects that are \"lines\" of some sort (see table below)^[There are still other geoms that use `linewidth=`.] all control their size or thickness with `linewidth=`. As noted in the [first section](#aesthetic-specification-documentation), `linewidth=` is measured in mm but due to an historical error it actually scales to \"roughly 0.75 mm.\"^[The actual mm depends on the resolution of the display device.] The default linewidth for most geoms is 0.5, though some differ as shown below.^[These defaults come from, for example, `GeomLine$default_aes`.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ntmp <- data.frame(`geom_`=c(\"abline()\",\"area()\",\"bar()\",\"boxplot()\",\n                            \"col()\",\"contour()\",\"curve()\",\"errorbar()\"),\n                  default=c(GeomAbline$default_aes$linewidth,\n                            GeomArea$default_aes$linewidth,\n                            GeomBar$default_aes$linewidth,\n                            GeomBoxplot$default_aes$linewidth,\n                            GeomCol$default_aes$linewidth,\n                            GeomContour$default_aes$linewidth,\n                            GeomCurve$default_aes$linewidth,\n                            GeomErrorbar$default_aes$linewidth),\n                  `     `=rep(\"     \",8),\n                  `geom_`=c(\"hline()\",\"line()\",\"path()\",\"pointrange()\",\n                            \"polygon()\",\"segment()\",\"smooth()\",\"tile()\"),\n                  default=c(GeomHline$default_aes$linewidth,\n                            GeomLine$default_aes$linewidth,\n                            GeomPath$default_aes$linewidth,\n                            GeomPointrange$default_aes$linewidth,\n                            GeomPolygon$default_aes$linewidth,\n                            GeomSegment$default_aes$linewidth,\n                            GeomSmooth$default_aes$linewidth,\n                            GeomTile$default_aes$linewidth),\n                  check.names=FALSE)\ntmp |> knitr::kable() |>\n  kableExtra::kable_styling(full_width=FALSE,\n                            bootstrap_options=c(\"striped\",\"hover\")) |>\n  kableExtra::column_spec(3,width=\"4em\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> geom_ </th>\n   <th style=\"text-align:right;\"> default </th>\n   <th style=\"text-align:left;\">       </th>\n   <th style=\"text-align:left;\"> geom_ </th>\n   <th style=\"text-align:right;\"> default </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> abline() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> hline() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> area() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> line() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> bar() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> path() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> boxplot() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> pointrange() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> col() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> polygon() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> contour() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> segment() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> curve() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> smooth() </td>\n   <td style=\"text-align:right;\"> 1.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> errorbar() </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:left;width: 4em; \">  </td>\n   <td style=\"text-align:left;\"> tile() </td>\n   <td style=\"text-align:right;\"> 0.1 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThe display below gives an idea of the relative sizes of the different `linewidth=` values.^[The most common default linewidth is shown in red.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndat1 <- data.frame(lw=c(0.1,0.25,0.5,0.75,1,1.5,2,3,4)) |>\n  dplyr::mutate(x=rep(0,length(lw)),\n         xend=rep(1,length(lw)),\n         y=seq_along(lw),\n         yend=y)\n\nggplot(data=dat1) +\n  geom_segment(mapping=aes(x=x,xend=xend,y=y,yend=yend,linewidth=lw)) +\n  scale_y_continuous(name=\"linewidth=\",breaks=dat1$y,labels=dat1$lw) +\n  geom_segment(x=0,y=3,xend=1,yend=3,color=\"red\") +\n  scale_x_continuous(expand=expansion(mult=0)) +\n  scale_linewidth_identity() +\n  theme_classic() +\n  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),\n        axis.ticks=element_blank(),axis.line=element_blank(),\n        axis.title.y=element_text(size=14),axis.text.y=element_text(size=12),\n        legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-linewidths-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n&nbsp;\n\n## Points\nAs alluded to in the [first section](#aesthetic-specification-documentation), points consist of a `size=` \"fill\" portion and a `stroke=` \"color\" outline portion. As shown above, the total \"size\" of the point is the sum of the `size=` and `stroke=` value, though these values seem to be scaled differently. The `size=` portion of the point is scaled to the same as `size=` for text and `linewidth=` for lines. However, `stroke=` is scaled larger and, thus, you cannot \"trade\" values from `scale=` to `stroke=` to get the same size of point.\n\nThe default values for points are `size=1.5` and `stroke=0.5`.^[Because of the small `stroke=` value, the issue discussed above is likely not going to be noticeable.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nGeomPoint$default_aes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  Aesthetic mapping: \n#R|  * `shape`  -> 19\n#R|  * `colour` -> \"black\"\n#R|  * `size`   -> 1.5\n#R|  * `fill`   -> NA\n#R|  * `alpha`  -> NA\n#R|  * `stroke` -> 0.5\n```\n:::\n:::\n\n\nThe following figure gives an idea of what different sizes look like for different shapes of \"points.\"^[The default `stroke=` of 0.5 was used.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nszs <- c(1,1.5,2,2.5,3,4,5)\ndat4 <- tidyr::expand_grid(Size=szs,Shape=c(19,21,1,17,24,2,15,22,0)) |>\n  mutate(fShape=factor(Shape,levels=c(19,21,1,17,24,2,15,22,0)),\n         fSize=factor(Size))\n\nstroke <- 0.5\n\nggplot(data=dat4,mapping=aes(x=fShape,y=fSize,size=Size,shape=Shape)) + \n  geom_hline(yintercept=seq_along(szs),linewidth=szs+stroke,color=\"gray90\") +\n  geom_hline(yintercept=seq_along(szs),linewidth=szs,color=\"gray95\") +\n  geom_point(fill=\"red\",stroke=stroke) +\n  scale_size_identity() +\n  scale_shape_identity() +\n  scale_y_discrete(name=\"Size\",expand=expansion(mult=0.1),breaks=szs) +\n  scale_x_discrete(name=\"Shape\",expand=expansion(mult=0.1)) +\n  theme_bw() +\n  theme(axis.line=element_blank(),\n        axis.title=element_text(size=14),axis.text=element_text(size=12),\n        panel.grid.minor=element_blank(),\n        panel.border=element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-points-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n\n## Examples\n### Scatterplot with Best-Fit Line\nAs an example, suppose that you have log-transformed catch-at-age data that looks like this.^[This is typical, though idealistic, catch curve data.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(173)\ndat <- data.frame(age=1:8) |>\n  mutate(catch=500*(1-0.4)^age+rnorm(8,sd=10),\n         catch=round(catch,0),\n         logcatch=log(catch))\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    age catch logcatch\n#R|  1   1   311 5.739793\n#R|  2   2   176 5.170484\n#R|  3   3   125 4.828314\n#R|  4   4    60 4.094345\n#R|  5   5    42 3.737670\n#R|  6   6    18 2.890372\n#R|  7   7    12 2.484907\n#R|  8   8    26 3.258097\n```\n:::\n:::\n\n\nAnd a simple \"catch curve\" plot is constructed that looks like this.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=dat,mapping=aes(x=age,y=logcatch)) +\n  geom_smooth(method=lm,color=\"black\",fill=\"gray80\") +\n  geom_point(shape=21,fill=\"gray60\") +\n  scale_y_continuous(name=\"log(Catch)\") +\n  scale_x_continuous(name=\"Age (years)\",breaks=1:8) +\n  theme_bw() +\n  theme(panel.grid.minor=element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-plot-1-1.png){fig-align='center' width=432}\n:::\n:::\n\n\nHowever, suppose that you made the following changes to meet some (perhaps yours) requirements.\n\n- Points that are twice as big (i.e., `size=3` rather than default `size=1.5`).\n- A \"best-fit\" line that is 50% thicker (i.e., `linewidth=1.5` rather than default `linewidth=1`).\n- Axis title labels that are 14 pt.\n- Axis tick mark labels that are 12 pt.\n- A species annotation label (in the upper-right corner) that uses 14 pt font.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=dat,mapping=aes(x=age,y=logcatch)) +\n  geom_smooth(method=lm,color=\"black\",fill=\"gray80\",linewidth=1.5) +\n  geom_point(shape=21,fill=\"gray60\",size=3) +\n  scale_y_continuous(name=\"log(Catch)\") +\n  scale_x_continuous(name=\"Age (years)\",breaks=1:8) +\n  annotate(geom=\"text\",label=\"Freshwater Drum\",x=Inf,y=Inf,vjust=1.5,hjust=1.1,\n           size=14/.pt) +\n  theme_bw() +\n  theme(panel.grid.minor=element_blank(),\n        axis.title=element_text(size=14),\n        axis.text=element_text(size=12))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-plot-2-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n### Bar Chart with Labels\nSuppose these same data are presented as a bar chart without the fitted line.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=dat,mapping=aes(x=age,y=catch)) +\n  geom_col(fill=\"gray60\",color=\"black\") +\n  scale_y_continuous(name=\"Catch\",expand=expansion(mult=c(0,0.1))) +\n  scale_x_continuous(name=\"Age (years)\",breaks=1:8) +\n  theme_bw() +\n  theme(panel.grid.minor=element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-plot-3-1.png){fig-align='center' width=432}\n:::\n:::\n\n\nAnd further suppose that you want to make the same textual changes as above and ...\n\n- Borders of the bars two times heavier (i.e., `linewidth=1` rather than the default `linewidth=0.5`).\n- Horizontal gridlines four times heavier (i.e., `linewidth=2` rather than the default `linewidth=0.5`).\n- Numeric labels of the catch amount above each bar in 12 pt font.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=dat,mapping=aes(x=age,y=catch)) +\n  geom_col(fill=\"gray60\",color=\"black\",linewidth=1) +\n  geom_text(mapping=aes(label=catch),vjust=-0.5,size=12/.pt) +\n  scale_y_continuous(name=\"Catch\",expand=expansion(mult=c(0,0.1))) +\n  scale_x_continuous(name=\"Age (years)\",breaks=1:8) +\n  annotate(geom=\"text\",label=\"Freshwater Drum\",x=Inf,y=Inf,vjust=1.5,hjust=1.1,\n           size=14/.pt) +\n  theme_bw() +\n  theme(panel.grid.minor=element_blank(),\n        axis.title=element_text(size=14),\n        axis.text=element_text(size=12),\n        panel.grid.major.y=element_line(linewidth=2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-plot-4-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}