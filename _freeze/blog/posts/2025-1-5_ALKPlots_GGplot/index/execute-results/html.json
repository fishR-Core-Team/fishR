{
  "hash": "9f5e216e70b864fd7ea19c7c209ede39",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Age-Length Key Plots\ndescription: Plots similar to alkPlot() from FSA using ggplot2.\nauthor: Derek H. Ogle\ndate: 1/5/2025\nimage: preview.png\ncategories:\n  - Age-Length Key\n  - ggplot2\n---\n\n\n\n# Introduction\nIt is often important to examine the structure of an age-length key to ascertain its utility. The plots created with `alkPlot()` from `FSA` ([see here](https://fishr-core-team.github.io/FSA/reference/alkPlot.html#ref-examples)) provide a quick method to create useful plots for this purpose. However, those plots are generally not of \"publication-quality\" and because some characteristics of the plots are hard-coded in the function, they are difficult (if not impossible) to customize. Modifying `alkPlot()` to be more flexible looked to require more work than benefit to be gained. Thus, here, I will demonstrate how to make similar plots using `ggplot2` that will allow the user great flexibility for customizing the plots for publication (or exploration).\n\nThe following packages are loaded for use below.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # for dplyr, tibble, and ggplot2 packages\nlibrary(FSA)        # for lencat(), fact2num(), alkPlot() and WR79 data\n```\n:::\n\n\n\nI made a simple `ggplot2` theme for use below. This can be modified as described, for example, [here](https://fishr-core-team.github.io/fishR/blog/posts/2022-12-22_AFS_Style_Figures/) to further alter the overall appearance of the plots.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_ALK <- function(...) {\n  theme_bw(...) +\n    theme(panel.grid=element_blank(),\n          axis.title=element_text(size=14,face=\"bold\"),\n          axis.text=element_text(size=12))\n} \n```\n:::\n\n\n\n&nbsp;\n\n# Construct Example Age-Length Key\nThis post uses the same `WR79` from `FSA` ([described here](https://fishr-core-team.github.io/FSA/reference/WR79.html)) to create the same age-length key used in [the examples](https://fishr-core-team.github.io/FSA/reference/alkPlot.html#ref-examples) for `alkPlot()`. The age-length key from these data is created below as demonstrated in [Introductory Fisheries Analsyses with R](https://derekogle.com/IFAR/).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nWR.age <- droplevels(subset(WR79, !is.na(age)))\nWR.age$LCat <- lencat(WR.age$len,w=5)\nraw <- xtabs(~LCat+age,data=WR.age)\nWR.key <- prop.table(raw, margin=1)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nround(WR.key,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|       age\n#R|  LCat      4     5     6     7     8     9    10    11\n#R|    35  1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    40  1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    45  1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    50  1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    55  1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    60  0.600 0.400 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    65  0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    70  0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000\n#R|    75  0.000 0.889 0.111 0.000 0.000 0.000 0.000 0.000\n#R|    80  0.000 0.250 0.750 0.000 0.000 0.000 0.000 0.000\n#R|    85  0.000 0.000 0.909 0.091 0.000 0.000 0.000 0.000\n#R|    90  0.000 0.000 0.263 0.632 0.105 0.000 0.000 0.000\n#R|    95  0.000 0.000 0.059 0.706 0.176 0.000 0.059 0.000\n#R|    100 0.000 0.000 0.000 0.556 0.167 0.278 0.000 0.000\n#R|    105 0.000 0.000 0.000 0.286 0.429 0.143 0.143 0.000\n#R|    110 0.000 0.000 0.000 0.200 0.200 0.200 0.200 0.200\n#R|    115 0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.000\n```\n\n\n:::\n:::\n\n\n\nThis age-length key is converted to a data.frame for plotting with `ggplot2`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeydf <- as.data.frame(WR.key)\nstr(keydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|  'data.frame':\t136 obs. of  3 variables:\n#R|   $ LCat: Factor w/ 17 levels \"35\",\"40\",\"45\",..: 1 2 3 4 5 6 7 8 9 10 ...\n#R|   $ age : Factor w/ 8 levels \"4\",\"5\",\"6\",\"7\",..: 1 1 1 1 1 1 1 1 1 1 ...\n#R|   $ Freq: num  1 1 1 1 1 0.6 0 0 0 0 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(keydf$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|  [1] \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\"\n```\n\n\n:::\n:::\n\n\n\nBy default the `LCat` and `age` variables are factors in the new data.frame.^[One could use `stringsAsFactors=FALSE` in `as.data.frame()` but having those two variables as strings is not helpful.] Having `age` as a factor **is** useful, but the naturally increasing order of the levels (see above) causes the vertical ordering of ages in the plots below to be opposite of what is desired. Thus, the order of the age levels is reversed with `fct_rev()` from `forcats` and the name is changed to `fage` to make it clear that it is a factor. Some of the plots below require `age` as a numeric, rather than a factor, so the numeric ages are added to the data.frame in `nage` using `fact2num()` from `FSA`.^[`fact2num()` is used because it maintains the correct numerical value for each level of the factor.]\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeydf <- keydf |>\n  dplyr::mutate(age=forcats::fct_rev(age),\n                nage=FSA::fact2num(age)) |>\n  dplyr::rename(fage=age)\nstr(keydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|  'data.frame':\t136 obs. of  4 variables:\n#R|   $ LCat: Factor w/ 17 levels \"35\",\"40\",\"45\",..: 1 2 3 4 5 6 7 8 9 10 ...\n#R|   $ fage: Factor w/ 8 levels \"11\",\"10\",\"9\",..: 8 8 8 8 8 8 8 8 8 8 ...\n#R|   $ Freq: num  1 1 1 1 1 0.6 0 0 0 0 ...\n#R|   $ nage: num  4 4 4 4 4 4 4 4 4 4 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(keydf$fage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|  [1] \"11\" \"10\" \"9\"  \"8\"  \"7\"  \"6\"  \"5\"  \"4\"\n```\n\n\n:::\n:::\n\n\n\nThere is no value below to having `LCat` as a factor so it is changed to a numeric using `fact2num()`. Finally, `Freq` is a proportion and not a \"count\" so it is changed to the more accurate `prop` below.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeydf <- keydf |>\n  dplyr::mutate(LCat=FSA::fact2num(LCat)) |>\n  dplyr::rename(prop=Freq)\nstr(keydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|  'data.frame':\t136 obs. of  4 variables:\n#R|   $ LCat: num  35 40 45 50 55 60 65 70 75 80 ...\n#R|   $ fage: Factor w/ 8 levels \"11\",\"10\",\"9\",..: 8 8 8 8 8 8 8 8 8 8 ...\n#R|   $ prop: num  1 1 1 1 1 0.6 0 0 0 0 ...\n#R|   $ nage: num  4 4 4 4 4 4 4 4 4 4 ...\n```\n\n\n:::\n:::\n\n\n\nAll of the previous modifications to the age-length key data.frame could be performed more efficiently in the following chain of commands.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeydf <- as.data.frame(WR.key) |>\n  dplyr::mutate(age=forcats::fct_rev(age),\n                nage=FSA::fact2num(age),\n                LCat=FSA::fact2num(LCat)) |>\n  dplyr::rename(fage=age,\n                prop=Freq)\n```\n:::\n\n\n\nFinally, many of the length-age combinations in the age-length key are 0. Some of the plots made below are better made without the zeroes, whereas some are better with the zeroes. Thus, a second data.frame without zeroes is needed.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkeydf_nozeroes <- keydf |>\n  dplyr::filter(prop>0)\n```\n:::\n\n\n\n# Stacked Barplot\nThe age-length key may be visualized as a stacked bar (or column) plot with proportion at age on the y-axis, length categories on the x-axis, and stacks colored according to the factored age. Note that the data.frame without zeroes and `fage` is used. Further note that younger ages start at the bottom of the bars because the order of the levels was reversed in `fage`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_col() +\n  theme_ALK()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-barplot-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nThis plot can be improved by providing better labels for the axes, providing more length labels on the x-axis, and minimizing the extra vertical and horizontal spaced caused by expanding the x- and y-axes.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_col() +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-barplot-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nI also prefer to include age labels in the bars rather than having a legend. These labels may be added with `geom_text()`.^[`geom_label()` provides a slightly different look.] but the position needs to be controlled with `position_stack()` due to the stacking of the bars. `vjust=0.5` is used in `position_stack()` so that the label will be placed at the halfway point (vertically) of the bar. With these labels, the legend is no longer needed and is removed within `theme()`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_col() +\n  geom_text(mapping=aes(label=fage),\n            size=3,position=position_stack(vjust=0.5)) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-barplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n#  Bubble Plot\nAnother useful plot for visualizing the age-length key is to plot a point at each age-length position (for which fish existed) and scale the size of the point to the proportion found in the age-length key. The start of the plot is shown below, noting that the data.frame without zeroes and `nage` is used.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=nage,x=LCat)) +\n  geom_point() +\n  scale_y_continuous(name=\"Age\",expand=expansion(mult=0.05),breaks=4:11) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.05),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-bubbleplot-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nTwo modifications are required to scale the size of the points. First, the size attribute within `geom_point()` should be mapped to \"proportions\" from the age-length key data.frame (i.e., `prop`). I also mapped color to the factored ages (i.e., `fage`), but that is superfluous as all points corresponding to each age on the y-axis will be the same color.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=nage,x=LCat)) +\n  geom_point(mapping=aes(size=prop,color=fage)) +\n  scale_y_continuous(name=\"Age\",expand=expansion(mult=0.05),breaks=4:11) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.05),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-bubbleplot-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nThe second modification is to better control how the sizes of the points are determined with `scale_size()`. Below `breaks=` is used to create breaks in the range of values of the `size=` variable (i.e., `prop`) from 0 to 1 in steps of 0.1 (so, 10 breaks across the range of possible `prop` values). `range=` is then used to set a range of \"size\" values for the points. Here the range is set from 1 to 10 so that `size=1` would be used for the smallest break in `prop` and `size=10` would be used for the largest break in `prop`. In other words, the size of the points will range from 1 to 10 based on where the value of `prop` is in the `breaks=` sequence.^[You will likely need to try different values for `range=` to get \"bubble\" sizes that you prefer.]\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=nage,x=LCat)) +\n  geom_point(mapping=aes(size=prop,color=fage)) +\n  scale_size(range=c(1,10),breaks=seq(0,1,0.1)) +\n  scale_y_continuous(name=\"Age\",expand=expansion(mult=0.05),breaks=4:11) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.05),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-bubbleplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n# Line Plot\n\"Line plots\" of the age-length key are easily constructed from the data.frame *with* zeroes using `geom_line()`.^[`size=` is used here to make the lines a little heavier than the default.]\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf,mapping=aes(y=prop,x=LCat,color=fage)) +\n  geom_line(size=1) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-lineplot-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nAgain I prefer to have labels on the plot rather than in a legend if possible. In `alkPlot()` from `FSA` the line plot has age labels at the peak of each line. Adding these labels requires a separate data.frame that contains the portion of the age-length key data.frame that corresponds to the first instance of the maximum `prop` for each age. This data.frame is constructed below.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nagelbldf <- keydf |>\n  group_by(fage) |>\n  slice(which.max(prop)) |>\n  as.data.frame()   # to remove tibble and grouping\nagelbldf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n#R|    LCat fage      prop nage\n#R|  1  110   11 0.2000000   11\n#R|  2  115   10 1.0000000   10\n#R|  3  100    9 0.2777778    9\n#R|  4  105    8 0.4285714    8\n#R|  5   95    7 0.7058824    7\n#R|  6   85    6 0.9090909    6\n#R|  7   65    5 1.0000000    5\n#R|  8   35    4 1.0000000    4\n```\n\n\n:::\n:::\n\n\n\nThe age labels are included on the plot by first moving `data=` and `mapping=` from `ggplot()` to `geom_line()`.^[This is needed when separate data.frames are used to make different aspects of the plot.] Then include the second data.frame in `geom_label()`^[`geom_text()` provides a slightly different look.] with the the `label=` aesthetic to place the labels. `fill=` was used to fill the label box with the same color as the line, `size=` was used to increase the size of the text, and `alpha=` was used to make the color of the label box semi-transparent so that the lines behind them could still be seen. Furthermore, the expansion for the x-axis and the top of the y-axis were increased to make room for the labels. and the now unnecessary legend was removed.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=keydf,mapping=aes(y=prop,x=LCat,color=fage),\n            size=1) +\n  geom_label(data=agelbldf,mapping=aes(y=prop,x=LCat,label=fage,fill=fage),\n            size=4,alpha=0.5) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.04))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.04),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-lineplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n# Area Plot\nArea plots are similar to the barplot from above. However, I have found these plots to be the hardest to make look nice and to modify using base R plotting functions and, thus, I did not use them often. Here is a start for constructing an area plot with `ggplot2` using `geom_area()`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=keydf,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_area() +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-areaplot-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nAs before, I prefer to label the agess within the areas, rather than as a legend. I could not find an automated way to do this. Thus, the general method for labeling the lines in the line plot will be followed, except that the data.frame will have to be created by manually filling the `LCat` and `prop` values for where the labels should be placed. In practice this will likely take some trial-and-error as the positions are \"eye-balled.\" Below I use `tribble()` from `tibble` because I like how the data can be entered by rows rather than by columns.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nagelbldf <- tibble::tribble(\n  ~LCat,~prop,~lbl,\n   47, 0.50,  \"4\",\n   70, 0.50,  \"5\",\n   83, 0.50,  \"6\",\n   95, 0.50,  \"7\",\n  103, 0.62,  \"8\",\n  101, 0.85,  \"9\",\n  112, 0.70, \"10\",\n  110, 0.95, \"11\"\n)\n```\n:::\n\n\n\nThis data.frame is then used with either `geom_text()` or `geom_label()` to add the labels to the appropriate areas. Note that `vjust=0.5` and `hjust=0.5` center the text label on the given coordinates.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_area(data=keydf,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_text(data=agelbldf,mapping=aes(y=prop,x=LCat,label=lbl),\n             size=4,vjust=0.5,hjust=0.5) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-areaplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n&nbsp;\n\n# Why These Modifications?\nI prefer these plots to those produced by `alkPlot()` (even though I wrote the code for all of those plots) because the full arsenal of ggplot2 commands can be used to modify the plots and because these plots more readily handle some issues with age-length keys.\n\nIt is beyond the scope of this post to show all the ways these plots can be modified with `ggplot2` code. A simple example is to replace the rather garish colors used above. For example, the fill color on the barplot can be changed to a scale of blues with `scale_fill_brewer()` as shown below. Many other color schemes can be used (see [this](https://bookdown.dongzhuoer.com/hadley/ggplot2-book/colour-discrete) as one (of many) demonstration of choosing colors.)\n\n\n\n::: {.cell layout-align=\"center\" output-line-numbers='8'}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_col() +\n  geom_text(mapping=aes(label=fage),\n            size=3,position=position_stack(vjust=0.5)) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  scale_fill_brewer(palette=\"Blues\") +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-barplot-modcolor-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nYou may want to avoid color altogether and use a grey scale when preparing for print publications. One could use `scale_color_brewer(palette=\"Greys\")` but this tends to leave the last age as white, which may not be effective. Instead use `scale_color_grey()` and use `start=` and `end=` to control the levels of grey (note that 0 is black and 1 is white).\n\n\n\n::: {.cell layout-align=\"center\" output-line-numbers='7'}\n\n```{.r .cell-code}\nggplot(data=keydf_nozeroes,mapping=aes(y=nage,x=LCat)) +\n  geom_point(mapping=aes(size=prop,color=fage)) +\n  scale_size(range=c(1,10),breaks=seq(0,1,0.1)) +\n  scale_y_continuous(name=\"Age\",expand=expansion(mult=0.05),breaks=4:11) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.05),\n                     breaks=seq(0,1000,5)) +\n  scale_color_grey(start=0.8,end=0.2) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-bubbleplot-colormod-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nThis post originally started because a user noted that `alkPlot()` plots were not appropriate when some of the length classes were missing from the age-length key. For example, suppose that no fish existed from 55 to 70 cm in the original data.frame.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nWR.age <- droplevels(subset(WR79, !is.na(age)))\nWR.age <- subset(WR.age,len<55 | len>70)        # remove 55-70 cm fish\nWR.age$LCat <- lencat(WR.age$len,w=5)\nraw <- xtabs(~LCat+age,data=WR.age)\nWR.key <- prop.table(raw, margin=1)\n```\n:::\n\n\n\nSee how the `alkPlot()` plot does not clearly show the gap in the data for those lengths (i.e., the 50- and 70-cm bars are right next to each other).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nalkPlot(WR.key)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-ALKplot-missing-Lcat-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\nHowever, the similar `ggplot2` plot, though clearly requiring more code from the user, properly shows the missing length categories.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nWR.keydf <- as.data.frame(WR.key) |>\n  dplyr::mutate(age=forcats::fct_rev(age),\n                nage=FSA::fact2num(age),\n                LCat=FSA::fact2num(LCat)) |>\n  dplyr::rename(fage=age,\n                prop=Freq) |>\n  dplyr::filter(prop>0)\n\nggplot(data=WR.keydf,mapping=aes(y=prop,x=LCat,fill=fage)) +\n  geom_col() +\n  geom_text(mapping=aes(label=fage),\n            size=3,position=position_stack(vjust=0.5)) +\n  scale_y_continuous(name=\"Proportion\",expand=expansion(mult=c(0,0.01))) + \n  scale_x_continuous(name=\"Total Length (cm)\",expand=expansion(mult=0.01),\n                     breaks=seq(0,1000,5)) +\n  theme_ALK() +\n  theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ALK-barplot-missing-Lcat-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n&nbsp;\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}