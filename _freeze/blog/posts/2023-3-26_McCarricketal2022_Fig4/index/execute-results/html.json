{
  "hash": "af788d729e48fe8aa347a3220a658181",
  "result": {
    "markdown": "---\ntitle: McCarrick et al. (2022) Wr Plot\ndescription: Using ggplot2 to recreate the relative weight (wr) by year figure in McCarrick et al. (2022).\nauthor: Derek H. Ogle\ndate: 3/26/2023\nimage: preview.png\ncategories:\n  - ggplot2\n  - bar chart\n  - facets\n  - axes\n  - confidence intervals\n  - Data Wrangling\n  - Relative Weight\n  - Condition\n---\n\n\n:::{.callout-important}\n## Series Note\nThis is the third of several posts related to @mccarricketal_2022.\n:::\n\n# Introduction\n@mccarricketal_2022 examined the population dynamics of Yellowstone Cutthroat Trout (*Oncorhynchus clarkii bouvieri*) in Henrys Lake, Idaho over a nearly two decade period. Their [Figure 4](https://meridian.allenpress.com/view-large/figure/14538508/i1944-687X-13-1-169-f04.tif) showed mean (with confidence interval) relative weight (Wr) for various length categories of Cutthroat Trout across years. I use `ggplot2` to recreate that figure here.\n\nThe following packages are loaded for use below. A few functions from each of `lubridate`, `FSA`, `plyr`, `scales`, `gghrx`, `lemon`, and `ggtext` are used with `::` such that the entire packages are not attached here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # for dplyr, ggplot2 packages\n```\n:::\n\n\n@mccarricketal_2022 computed what I am calling an overall PSD^[This is the most common PSD measure.] and what are called \"incremental\" PSD indices. I assume that these are familar to most fisheries scientists, but they are described in more detail in Chapter 8 of @ogleIntroductoryFisheriesAnalyses2016.^[Also see @blackwelletal_2000.]\n\n&nbsp;\n\n# Data Wrangling\n### Individual Fish Data Frame\n@mccarricketal_2022 provided raw data for Figure 2 as an Excel file in their Data Supplement S1. The same data wrangling, up to where catch-per-unit-effort was calculated, used in [this previous post](../2023-3-22_McCarricketal2022_Fig2/#data-wrangling) is used here^[And in [this post](../2023-3-25_McCarricketal2022_Fig3/)] and, thus, will not be discussed in detail. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- readxl::read_xlsx(\"../2023-3-22_McCarricketal2022_Fig2/download.xlsx\",\n                         na=c(\"\",\"??\",\"QTY =\",\"QTY=\",\"UNK\",\"NO TAG\"),\n                         col_types=c(\"date\",\"numeric\",\"text\",\n                                     \"numeric\",\"numeric\",\"text\")) |>\n  mutate(year=lubridate::year(Date),\n         year=ifelse(year==1905,2002,year)) |>\n  filter(!is.na(year)) |>\n  select(species=Species,year,length,weight)  |>\n  mutate(species=case_when(\n    species %in% c(\"YCT\",\"Yct\") ~ \"YCT\",\n    species %in% c(\"UTC\",\"CHB\",\"CHUB\") ~ \"UTC\",\n    TRUE ~ species\n  )) |>\n  filter(species %in% c(\"YCT\",\"UTC\")) |>\n  mutate(species2=plyr::mapvalues(species,\n                                  from=c(\"YCT\",\"UTC\"),\n                                  to=c(\"Cutthroat Trout\",\"Utah Chub\"))) |>\n  mutate(gcat=FSA::psdAdd(len=length,species=species2))\n\nFSA::headtail(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        species year length weight        species2     gcat\n#R|  1         YCT 2002    150     NA Cutthroat Trout substock\n#R|  2         YCT 2002    160     NA Cutthroat Trout substock\n#R|  3         YCT 2002    160     NA Cutthroat Trout substock\n#R|  19900     YCT 2020    391    550 Cutthroat Trout  quality\n#R|  19901     YCT 2020    284    229 Cutthroat Trout    stock\n#R|  19902     YCT 2020    440    853 Cutthroat Trout  quality\n```\n:::\n:::\n\n\nThe relative weigt for each fish needs to be added to this data frame, preferably with `wrAdd()` from `FSA`. Note, however, that there are two standard weight equations for Cutthroat Trout, one for lentic and one for lotic populations. We want to make sure to use the one for lentic populations here and, thus, cannot use the species name found in the data frame within `wrAdd()`. Note below that the data frame was also reduced to just Cutthroat Trout for which a weight was recorded, and the two species variables were dropped (just to simplify the output).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- dat |>\n  filter(species==\"YCT\",!is.na(weight)) |>\n  mutate(wr=FSA::wrAdd(weight,length,spec=\"Cutthroat Trout (lentic)\")) |>\n  select(-starts_with(\"species\"))\nFSA::headtail(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       year length weight     gcat        wr\n#R|  1    2004    174     54 substock 102.34315\n#R|  2    2004    227    130    stock 108.45450\n#R|  3    2004    305    380    stock 127.41903\n#R|  5208 2020    391    550  quality  85.68508\n#R|  5209 2020    284    229    stock  95.69629\n#R|  5210 2020    440    853  quality  92.31113\n```\n:::\n:::\n\n\n### Wr Summary Data Frame\nSummary statistics of relative weight for all fish is computed below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwr_all <- dat |>\n  group_by(year) |>\n  summarize(n=n(),\n            mn_wr=mean(wr,na.rm=TRUE),\n            sd_wr=sd(wr,na.rm=TRUE),\n            se_wr=FSA::se(wr,na.rm=TRUE))\nFSA::headtail(wr_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     year   n     mn_wr     sd_wr     se_wr\n#R|  1  2004 300 116.50388 16.405045 0.9650026\n#R|  2  2005 305 103.70058 14.860984 0.8509375\n#R|  3  2006 269 107.66011 20.258635 1.2351908\n#R|  15 2018  76 107.05779 25.899713 2.9709008\n#R|  16 2019 219  97.20635  7.485436 0.5058189\n#R|  17 2020 198  94.78333  8.648857 0.6146475\n```\n:::\n:::\n\n\nSummary statistics of relative weight for each length category is computed below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwr_gcat <- dat |>\n  group_by(year,gcat) |>\n  summarize(n=n(),\n            mn_wr=mean(wr,na.rm=TRUE),\n            sd_wr=sd(wr,na.rm=TRUE),\n            se_wr=FSA::se(wr,na.rm=TRUE)) |>\n  ungroup()\nFSA::headtail(wr_gcat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     year      gcat   n     mn_wr     sd_wr     se_wr\n#R|  1  2004  substock 110 103.54857 13.477955 1.3545854\n#R|  2  2004     stock 130 123.09751 11.535665 1.0117447\n#R|  3  2004   quality  34 127.50055 12.158543 2.0851728\n#R|  68 2020     stock  52  95.40331 10.326851 1.4320766\n#R|  69 2020   quality 132  94.78427  8.119609 0.7067213\n#R|  70 2020 preferred  13  92.28008  6.826683 1.8933812\n```\n:::\n:::\n\n\n@mccarricketal_2022 only plotted fish in the \"stock\", \"quality\", and \"preferred\" length categories in Figure 4; thus, only these length categories are retained below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwr_gcat <- wr_gcat |>\n  filter(gcat %in% c(\"stock\",\"quality\",\"preferred\"))\n```\n:::\n\n\nThe summaries for all fish and fish by length categories are row-bound (i.e., stacked) together to form an overall summary data frame. Because the data frame for all fish did not have a `gcat` variable, that variable will be populated with `NA` when the two data frames are bound. The `ifelse()` below converts these `NA` values to `All`, before `gcat` is factored with levels ordered as they would appear in Figure 4 and with more descriptive labels. Finally, for aesthetic purposes, I moved `gcat` to be the first variable and sorted the results by year within length category.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwr_dat <- bind_rows(wr_all,wr_gcat) |>\n  mutate(gcat=ifelse(is.na(gcat),\"All\",as.character(gcat)),\n         gcat=factor(gcat,levels=c(\"All\",\"stock\",\"quality\",\"preferred\"),\n                     labels=c(\"All fish\",\"Stock to Quality\",\n                              \"Quality to Preferred\",\"Preferred to Memorable\"))) |>\n  relocate(gcat) |>\n  arrange(gcat,year)\nFSA::headtail(wr_dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|                       gcat year   n     mn_wr     sd_wr     se_wr\n#R|  1                All fish 2004 300 116.50388 16.405045 0.9650026\n#R|  2                All fish 2005 305 103.70058 14.860984 0.8509375\n#R|  3                All fish 2006 269 107.66011 20.258635 1.2351908\n#R|  66 Preferred to Memorable 2018  22  98.79180 17.476556 3.7260144\n#R|  67 Preferred to Memorable 2019  17  98.61326  8.666677 2.1019780\n#R|  68 Preferred to Memorable 2020  13  92.28008  6.826683 1.8933812\n```\n:::\n:::\n\n\nFinally, the lower and upper confidence intervals for each mean are added to the data frame using normal distribution theory.^[`qt()` returns a the 97.5th percent critical value from a t-distribution with `df` degrees-of-freedom.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwr_dat <- wr_dat |>\n  mutate(lci=mn_wr-qt(0.975,df=n-1)*se_wr,\n         uci=mn_wr+qt(0.975,df=n-1)*se_wr)\nFSA::headtail(wr_dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|                       gcat year   n     mn_wr     sd_wr     se_wr       lci\n#R|  1                All fish 2004 300 116.50388 16.405045 0.9650026 114.60482\n#R|  2                All fish 2005 305 103.70058 14.860984 0.8509375 102.02610\n#R|  3                All fish 2006 269 107.66011 20.258635 1.2351908 105.22820\n#R|  66 Preferred to Memorable 2018  22  98.79180 17.476556 3.7260144  91.04313\n#R|  67 Preferred to Memorable 2019  17  98.61326  8.666677 2.1019780  94.15727\n#R|  68 Preferred to Memorable 2020  13  92.28008  6.826683 1.8933812  88.15476\n#R|          uci\n#R|  1  118.4029\n#R|  2  105.3750\n#R|  3  110.0920\n#R|  66 106.5405\n#R|  67 103.0693\n#R|  68  96.4054\n```\n:::\n:::\n\n\nThis data frame, now called `wr_dat`, is ready for recreating Figure 4.\n\n&nbsp;\n\n# Recreating Figure 4\nFigure 4 is a simple bar plot facetted across years similar to the PSD plot in [this previous post](../2023-3-25_McCarricketal2022_Fig3/#recreating-figure-3). Confidence intervals are added as described in [that same post](../2023-3-25_McCarricketal2022_Fig3/#adding-confidence-intervals). Thus, many of the details below are not discussed further here. However, there are two new things to consider here.\n\nFirst, the y-axis in Figure 4 in @mccarricketal_2020 is limited from 70 to 140. If `limits=c(70,140)` is used in `scale_y_continuous()` as described in [this post]() the bars will be removed because their \"data\" extends to zero.^[Data points outside axis limits created in this way are treated as missing and are removed from the figure.] Thus, the limits of the y-axis must be set with `ylim=` in `coord_cartesian()` to preserved the bars.\n\nSecond, the y-axis label in Figure 4 in @mccaricketal_2020 is italicized with a subscript \"r\". In the markdown language, asterisks are used to denoted italics and the tilde is used to create a subscript, which can be seen in `name=` in `scale_y_continuous()`. However, to make this markdown code render properly `axis.title.y=` in `theme` must be set to `element_markdown()` from `ggtext`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=wr_dat,mapping=aes(x=year,y=mn_wr)) +\n  geom_errorbar(mapping=aes(ymin=lci,ymax=uci),width=0.25) +\n  geom_col(color=\"black\",fill=\"gray70\",width=1) +\n  geom_text(mapping=aes(label=gcat),x=Inf,y=Inf,vjust=1.25,hjust=1.05,size=3,\n            check_overlap=TRUE) +\n  scale_y_continuous(name=\"*W~r~*\",expand=expansion(mult=0),\n                     breaks=scales::breaks_width(10)) +\n  scale_x_continuous(name=\"Year\",\n                     limits=c(2000,2022),breaks=scales::breaks_width(2),\n                     expand=expansion(mult=0)) +\n  coord_cartesian(ylim=c(70,140)) +\n  lemon::facet_rep_wrap(vars(gcat),ncol=1) +\n  theme_bw() +\n  theme(panel.grid=element_blank(),\n        strip.background=element_blank(),\n        strip.text=element_blank(),\n        axis.title.y=ggtext::element_markdown())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig4-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n&nbsp;\n\n# Further Thoughts\n### Point-and-Lines Plot\nAs mentioned in [this previous post](../2023-3-25_McCarricketal2022_Fig3/#further-thoughts) I understand that these are the much derided [\"dynamite plots\"](https://simplystatistics.org/posts/2019-02-21-dynamite-plots-must-die/). Personally, I find the bars distracting (so much gray with little purpose and starting at 70) and find a point-and-lines plot, possibly with a horizontal line at the common reference value of 100. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=wr_dat,mapping=aes(x=year,y=mn_wr)) +\n  geom_errorbar(mapping=aes(ymin=lci,ymax=uci),width=0.25) +\n  geom_line(linewidth=0.75,color=\"gray70\") +\n  geom_point(size=1) +\n  geom_hline(yintercept=100,color=\"gray30\",linetype=\"dashed\",linewidth=0.5) +\n  geom_text(mapping=aes(label=gcat),x=Inf,y=Inf,vjust=1.25,hjust=1.05,size=3,\n            check_overlap=TRUE) +\n  scale_y_continuous(name=\"*W~r~*\",limits=c(70,140),expand=expansion(mult=0),\n                     breaks=scales::breaks_width(10)) +\n  scale_x_continuous(name=\"Year\",\n                     limits=c(2000,2022),breaks=scales::breaks_width(2),\n                     expand=expansion(mult=0)) +\n  lemon::facet_rep_wrap(vars(gcat),ncol=1) +\n  theme_bw() +\n  theme(panel.grid=element_blank(),\n        strip.background=element_blank(),\n        strip.text=element_blank(),\n        axis.title.y=ggtext::element_markdown())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig4-alt-1.png){fig-align='center' width=432}\n:::\n:::\n\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}