{
  "hash": "21d0cebef92430644e175d298c279805",
  "result": {
    "markdown": "---\ntitle: AFS Style in ggplot2 Figures\ndescription: Modifying the Glassic et al. (2019) process for modifying ggplot2 graphs to match the AFS Style Guide.\nauthor: Derek H. Ogle\ndate: 12/22/2022\nimage: preview.png\ncategories:\n  - ggplot2\ndraft: true\n---\n\n\n:::{.callout-note}\nThe following packages are loaded for use below.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(patchwork)  # for positioning multiple plots\n```\n:::\n\n\n&nbsp;\n\n# Introduction\n@glassic_creating_2019 showed how to modify default `ggplot2` graphics to meet American Fisheries Society (AFS) Style Guide requirements.^[They also did the same for base R graphics.] They provided an example with accompanying script to help users implement their suggestions.^[The `ggplot2` script is available [here](https://github.com/CGuyMSU/AFS-figures/blob/master/ggplot2_figure.r).] Since their publication `ggplot2` has been updated, which did not break their code but leads to some warnings of changed arguments. In this post, I update their script and provide a mechanism that I think will allow their recommendations to be more easily implemented.\n\nThe first part of the authors' script^[Which is not shown here as I want to focus on graphing.] creates a simple data frame, called `length_weight_data`, of simple weight and length data for two species (`lmb` and `cat`).\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# a quick peek at the data\nFSA::peek(length_weight_data,n=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     species length    weight\n#R|  1      lmb    200  100.7561\n#R|  12     lmb    310  422.8894\n#R|  25     lmb    440 1330.5176\n#R|  37     cat    250  125.5493\n#R|  50     cat    380  498.6630\n#R|  62     cat    500 1231.4228\n```\n:::\n:::\n\n\n&nbsp;\n\n# @glassic_creating_2019 Figures\n@glassic_creating_2019 first demonstrated a default `ggplot2` plot (@fig-glassic (A)).^[This is their code exactly, except that I added indentations for easier reading.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlen_wt_default <- ggplot(data = length_weight_data,\n                         aes(x = length, y = weight, fill = species)) +\n  geom_point() +\n  labs(title = \"A\")\n```\n:::\n\n\nThey then modified this plot to fit the AFS Style Guide requirements (@fig-glassic (B)).^[I modified their `legend.position` slightly due to website size constraints.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlen_wt_afs <- ggplot(data = length_weight_data,\n                           aes(x = length, y = weight, fill = species)) +\n  #set symbol shape and size\n  geom_point(shape = 21, size = 2) +\n  #set the limits and tick breaks for the y-axis\n  scale_y_continuous (limits = c(0,2400), expand = c(0,0),\n                      breaks = seq(0,2400,400)) +\n  #set the limits and tick spacing for the x-axis\n  scale_x_continuous(limits = c(100,600), expand = c(0,0),\n                     breaks = seq(100,600,100)) +\n  #adjust the order of the legend, make new labels, and select the symbol colors\n  scale_fill_manual(limits = c(\"lmb\", \"cat\"),\n                    labels = c(\"Largemouth Bass\", \"Channel Catfish\"),\n                    values = c(\"black\", \"white\")) +\n  #add B to figure\n  ggtitle (\"B\") +\n  #label the y-axis\n  ylab(\"Weight (g)\") +\n  #label the x-axis\n  xlab(\"Length (mm)\") +\n  #add legend title, but left blank here because we want a legend but no title\n  labs(fill = \"\") +\n  #makes the figure background white without grid lines\n  theme_classic() +\n  #below are theme settings that provide unlimited control of your figure\n  #and can be a template for other figures set the size, spacing, and color\n  #for the y-axis and x-axis titles\n  theme(axis.title.y = element_text(size = 14, \n                                    margin = margin(t = 0, r = 10, b = 0, l = 0),\n                                    colour = \"black\"),\n        axis.title.x = element_text(size = 14, \n                                    margin = margin(t = 10, r = 0, b = 0, l = 0),\n                                    colour = \"black\"),\n        #set the font type\n        text = element_text(family = \"Times New Roman\"),\n        #modify plot title, the B in this case\n        plot.title = element_text(face = \"bold\", family = \"Arial\"),\n        #position the legend on the figure\n        legend.position = c(0.35,0.95),\n        #adjust size of text for legend\n        legend.text = element_text(size = 12),\n        #margin for the plot\n        plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\"),\n        #set size of the tick marks for y-axis\n        axis.ticks.y = element_line(size = 0.5),\n        #set size of the tick marks for x-axis\n        axis.ticks.x = element_line(size = 0.5),\n        #adjust length of the tick marks\n        axis.ticks.length = unit(0.2,\"cm\"),\n        #set size and location of the tick labels for the y axis\n        axis.text.y = element_text(colour = \"black\", size = 14, angle = 0, \n                                   vjust = 0.5, hjust = 1,\n                                   margin = margin(t = 0, r = 5, b = 0, l = 0)),\n        #set size and location of the tick labels for the x axis\n        axis.text.x = element_text(colour = \"black\", size = 14, angle = 0, \n                                   vjust = 0, hjust = 0.5,\n                                   margin = margin(t = 5, r = 0, b = 0, l = 0)),\n        #set the axis size, color, and end shape\n        axis.line = element_line(colour = \"black\", size = 0.5, lineend = \"square\"))\n```\n:::\n\n\nThey then arranged the two plots side-by-side.^[I used `gridExtra::` here so as not to have to load the entire package.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot_figure <- gridExtra::grid.arrange(len_wt_default, len_wt_afs, ncol = 2)\nggplot_figure\n```\n\n::: {.cell-output-display}\n![Figures made with `ggplot2` including one with (A) default values and (B) a custom figure that adheres to American Fisheries Society guidelines for authors. This reproduces Figure 2 in @glassic_creating_2019.](index_files/figure-html/fig-glassic-1.png){#fig-glassic fig-align='center' width=768}\n:::\n:::\n\n\n&nbsp;\n\nFinally, @glassic_creating_2019 demonstrated how to save the plot with a custom width and height (holding a specific aspect ratio) and resolution.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(ggplot_figure, file = \"ggplot_figure.tiff\", \n       width = 20.32, height = 7.62, units = \"cm\", dpi = 300)\n```\n:::\n\n\n&nbsp;\n\n# Issues that Must be Addressed\nWhen I first ran the author's code I received an error about a missing font. I followed the advice in [this guide](https://github.com/wch/extrafont#using-extrafont) from the `extrafont` package and that seemed to have cleared up the issue.\n\nMore recent versions of `ggplot2` use `linewidth=` rather than `size=` in all line-related elements. This needs to be changed in the authors' use of `axis.tick.x=`, `axis.tick.y=`, and `axis.line`.\n\n&nbsp;\n\n# Suggested Adjustments\nI separate the construction of the plot by @glassic_creating_2019 into two parts. The first part consists of items that are specific to the plot and that cannot be set globally for use in other plots. These are items likes `data=`, `aes()`, `geom()`s, `scale()`s, and labels. The second part consists of items that will likely need to be held constant across different plots. These are items like font size, tick lengths, margins, etc. These are largely the items that @glassic_creating_2019 adjust with `theme()`. Below I explain some suggested modifications to the plot specific items. I then show how to move most of the elements that will be common across plots into a custom theme that can be easily applied to any plot. Finally, I demonstrate using `patchwork` rather than `gridExtra` to place plots next to each other.\n\n## Plot-Specific Elements\nI suggest the following changes to the plot-specific elements which result in @fig-modplot (A).\n\n* I named the second argument to `ggplot()` with `mapping=`. `ggplot()` is smart enough to figure this argument out but I think it is awkward to name the first argument (i.e., `data=`) but not the second.\n* I moved the text for the axis labels (i.e., titles) into `scale_y_continuous()` and `scale_x_continuous()` for simplicity (and thus removed `ylab()` and `xlab()`).\n* I changed `expand=c(0,0)` in `scale_y_continuous()` and `scale_x_continuous()` to `expand=expansion(mult=c(0,0))` to follow more recent `ggplot2` conventions. This still results in not scale expansion at the top or bottom of axis.\n* I removed `limits=` in `scale_fill_manual()` and used a named vector in `values=` to accomplish the same task. I think this makes it easier to see which category is going to get which color.\n* I removed `ggtitle()` as I am going to accomplish that same task with `patchwork` as shown where I put the two plots together.\n* I used `legend.title=element_blank()` in `theme()` rather than `labs(fill=\"\")` to remove to legend title. I think(?) this handles the freed up space better.\n* I included `legend.position=` here because @glassic_creating_2019 positioned the legend within the plot area and, thus, will need to be set specific to each plot (i.e., in a \"white area\").\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlen_wt_afs1 <- ggplot(data=length_weight_data,\n                      mapping=aes(x=length,y=weight,fill=species)) +\n  # set symbol shape and size\n  geom_point(shape=21,size=2) +\n  # set the limits, tick breaks, and scale expansion for the y- and x-axis\n  scale_y_continuous(name=\"Weight (g)\",\n                      limits=c(0,2400),breaks=seq(0,2400,400),\n                      expand=expansion(mult=c(0,0))) +\n  scale_x_continuous(name=\"Length (mm)\",limits=c(100,600),breaks=seq(100,600,100),\n                      expand=expansion(mult=c(0,0))) +\n  # set the symbol colors and make new labels for each level\n  scale_fill_manual(values=c(\"lmb\"=\"black\",\"cat\"=\"white\"),\n                    labels=c(\"Largemouth Bass\",\"Channel Catfish\")) +\n  theme(\n    # remove legend title\n    legend.title=element_blank(),\n    # set legend position within the plot\n    legend.position = c(0.35,0.95)\n  )\n```\n:::\n\n\n## Custom Theme for All Plots\nTheme elements that will be consistent across plots can be put into a custom theme that can then be easily applied to any plot. The code below, for example, shows the start of a new theme called `theme_AFS()` that has `theme_classic()` as its base but will have several elements replaced. `theme_AFS()` will use a base font size of 14 and Times New Roman as defaults, which will minimize some of the authors code.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_AFS <- function(base_size=14,base_family=\"Times New Roman\") {\n  theme_classic(base_size=base_size,base_family=base_family) +\n    theme(\n      ### Change theme elements here ###\n    )\n}\n```\n:::\n\n\nWithin `theme()` of the code above I am going to add *nearly* all of the elements that @glassic_creating_2019 included, though I reordered the items in a way that makes sense to me (e.g., axis title then axis tick labels then axis ticks then axis line). Other adjustments to note are:\n\n* I removed the `text=` because the font family was already set with `base_family=`.\n* I removed `legend.position=` because @glassic_creating_2019 positioned the legend within the plot area and, thus, will need to be set specific to each plot (i.e., in a \"white area\").\n* I removed `size=14` from `axis.title.y=`, `axis.title.x=`, `axis.text.y=`, and `axis.text.x=` because that was set with `base_size=`.\n* I replaced `axis.ticks.y=` and `axis.ticks.x=` with `axis.ticks=` because their elements were the same and this will set both at the same time.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_AFS <- function(base_size=14,base_family=\"Times New Roman\") {\n  theme_classic(base_size=base_size,base_family=base_family) +\n    theme(\n      # modify plot title,the B in this case\n      plot.title=element_text(family=\"Arial\",face=\"bold\"),\n      # margin for the plot\n      plot.margin=unit(c(0.5,0.5,0.5,0.5),\"cm\"),\n      # set axis label (i.e., title) colors and margins\n      axis.title.y=element_text(colour=\"black\",margin=margin(t=0,r=10,b=0,l=0)),\n      axis.title.x=element_text(colour=\"black\",margin=margin(t=10,r=0,b=0,l=0)),\n      # set tick label color, margin, and position and orientation\n      axis.text.y=element_text(colour=\"black\",margin=margin(t=0,r=5,b=0,l=0),\n                               vjust=0.5,hjust=1),\n      axis.text.x=element_text(colour=\"black\",margin=margin(t=5,r=0,b=0,l=0),\n                               vjust=0,hjust=0.5,),\n      # set size of the tick marks for y- and x-axis\n      axis.ticks=element_line(linewidth=0.5),\n      # adjust length of the tick marks\n      axis.ticks.length=unit(0.2,\"cm\"),\n      # set the axis size,color,and end shape\n      axis.line=element_line(colour=\"black\",linewidth=0.5,lineend=\"square\"),\n      # adjust size of text for legend\n      legend.text=element_text(size=12)\n    )\n}\n```\n:::\n\n\nThis can then be \"added\" to any plot to apply the theme. For example, it is applied to the code from above that produced @fig-modplot (A) to make @fig-modplot (B). It is important, however, to make sure that the plot-specific `theme()` elements are applied **after** the custom theme.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlen_wt_afs2 <- ggplot(data=length_weight_data,\n                      mapping=aes(x=length,y=weight,fill=species)) +\n  # set symbol shape and size\n  geom_point(shape=21,size=2) +\n  # set the limits, tick breaks, and scale expansion for the y- and x-axis\n  scale_y_continuous(name=\"Weight (g)\",\n                     limits=c(0,2400),breaks=seq(0,2400,400),\n                     expand=expansion(mult=c(0,0))) +\n  scale_x_continuous(name=\"Length (mm)\",\n                     limits=c(100,600),breaks=seq(100,600,100),\n                     expand=expansion(mult=c(0,0))) +\n  # set the symbol colors and make new labels for each level\n  scale_fill_manual(values=c(\"lmb\"=\"black\",\"cat\"=\"white\"),\n                    labels=c(\"Largemouth Bass\",\"Channel Catfish\")) +\n  theme_AFS() +\n  theme(\n    # remove legend title\n    legend.title=element_blank(),\n    # set legend position within the plot\n    legend.position = c(0.35,0.95)\n  )\n```\n:::\n\n\n:::{.callout-note appearance=\"simple\"}\n## Hint\nSee the [\"Themes\" chapter of @wickham_ggplot2_2022](https://ggplot2-book.org/polishing.html#themes) for an excellent description of using themes in `ggplot2` graphics.\n:::\n\n## Using `patchwork` to Position Plots\nThe `patchwork` package provides a simple but extensive environment for combining multiple plots. In the simple case here where we want two plots side-by-side we simply need to \"add\" them together as shown below. `plot_annotation()` can be used to add letters to the two panels. The [documentation for `patchwork`](https://patchwork.data-imaginist.com/index.html) is excellent for better understanding what this package can do.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlen_wt_afs1 + len_wt_afs2 +\n  plot_annotation(tag_levels=\"A\")\n```\n\n::: {.cell-output-display}\n![Figures made with `ggplot2` including one with (A) only plot-specific modifications to default values and (B) with plot specific modifications and a custom theme that adheres to American Fisheries Society guidelines for authors. Panel B reproduces panel B in Figure 1 above and Figure 2 in @glassic_creating_2019.](index_files/figure-html/fig-modplot-1.png){#fig-modplot fig-align='center' width=768}\n:::\n:::\n\n\n:::{.callout-note appearance=\"simple\"}\n## Hint\nAnnotating the plots with `patchwork` will place the annotations on the very edge of the figure panel. Use `ggtitle()` to move them more to the right as @glassic_creating_2019 had them.\n:::\n\n&nbsp;\n\n# Conclusion\n@glassic_creating_2019 provided an excellent example and script for how to use `ggplot2` in R to make figures that adhere to the AFS Style Guidelines. Since their paper was published a few items in `ggplot2` have changed and, thus, their script needed to be updated to reflect those changes as described above. More importantly their suggestions could be put into a custom theme so that they could be easily applied to other figures to ensure consistency (and adherence to the AFS Style Guide). As an example, `theme_AFS()` is applied to a `ggplot2` length frequency histogram below (@fig-bghist).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(BluegillLM,package=\"FSAdata\")\nhead(BluegillLM)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    sernum  sl  fl  tl wght\n#R|  1    100 126 152 157   92\n#R|  2    110 124 150 153   88\n#R|  3    120 118 140 149   77\n#R|  4    130 136 163 172  130\n#R|  5    140 191 144 150   86\n#R|  6    150 121 149 155   90\n```\n:::\n\n```{.r .cell-code}\nggplot(data=BluegillLM,mapping=aes(x=tl)) +\n  geom_histogram(binwidth=10,boundary=0,color=\"black\",fill=\"gray25\") +\n  scale_y_continuous(name=\"Number of Bluegill\",\n                     limits=c(0,25),breaks=seq(0,25,5),\n                     expand=expansion(mult=c(0,0))) +\n  scale_x_continuous(name=\"Total Length (mm)\",\n                     limits=c(0,250),breaks=seq(0,250,25),\n                     expand=expansion(mult=c(0,0))) +\n  theme_AFS()\n```\n\n::: {.cell-output-display}\n![Total length frequency histogram of Lake Mary Bluegill.](index_files/figure-html/fig-bghist-1.png){#fig-bghist fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\nMoreover, if you are working on a project where you will use `theme_AFS()` for all figures then you can set it as the default theme at the beginning of our script with `theme_set()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(theme_AFS())\n```\n:::\n\n\nWith this @fig-bglw automatically has `theme_AFS()` applied.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=BluegillLM,mapping=aes(x=tl,y=wght)) +\n  geom_point(alpha=0.5) +\n  scale_y_continuous(name=\"Weight (g)\",\n                     limits=c(NA,300),breaks=c(2,5,10,50,100,200,300),\n                     expand=expansion(mult=c(0.01,0)),\n                     trans=\"log10\") +\n  scale_x_continuous(name=\"Total Length (mm)\",\n                     limits=c(NA,250),breaks=c(60,75,100,125,150,200,250),\n                     expand=expansion(mult=c(0.01,0)),\n                     trans=\"log10\")\n```\n\n::: {.cell-output-display}\n![Weight-length relationship for Lake Mary Bluegill. Note that both axes are on the log scale.](index_files/figure-html/fig-bglw-1.png){#fig-bglw fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}