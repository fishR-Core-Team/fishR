{
  "hash": "a59c3de322fe683ec706bd581df2e4b7",
  "result": {
    "markdown": "---\ntitle: Vaisvil et al. (2022) Hatching Date Figure\ndescription: Using ggplot2 to recreate the bass hatching date figure in Vaisvil et al. (2022).\nauthor: Derek H. Ogle\ndate: 2/15/2023\nimage: preview.png\ncategories:\n  - ggplot2\n  - Dates\n  - PNG\n  - Reference line\n---\n\n\n# Introduction\n\n@vaisviletal_2022 examined the effect of varying water levels on the timing of hatch dates and relative abundance of young-of-the-year Largemouth Bass (*Micropterus salmoides*) in a southwestern U.S. reservoir. [Figure 4](https://meridian.allenpress.com/view-large/figure/15051244/i1944-687X-13-2-534-f04.tif) of [their publication](https://meridian.allenpress.com/jfwm/article/13/2/534/483420/Water-Level-Fluctuations-and-Water-Temperature) showed the rate of change of water levels in the reservoir by day for 2017 and 2018, with the range of bass hatch dates noted. Interestingly they also included satellite images of the reservoir at the begninning of the hatch date range. In this post I recreate their Figure 4 using `ggplot2`.\n\n&nbsp;\n\n# Getting Setup\nThe following packages are loaded for use below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # for dplyr, ggplot2 packages\nlibrary(patchwork)  # for placing subpanels into one plot\n```\n:::\n\n\n&nbsp;\n\n# Plotting Raster Image\nFigure 4 in @vaisviletal_2022 consists of four panels with the left two panels being satellite images. I \"clipped\" both satellite images and saved them as PNG files for use here. Note that both images are the same size (number of pixels in both the horizontal and vertical directions).\n\n`readPNG()` from `png` reads a PNG file and returns a three dimensional matrix of x- and y- pixel positions as the rows and columns and four \"layers\" corresponding to the red, green, blue, and transparency values for a pixel. This matrix of RGBT values, however, is indexed from the upper-left whereas plotting is usually indexed from the lower-left (i.e., from 0,0). This provides several problems that are commonly discussed on forums^[For example, [here](https://stackoverflow.com/questions/61637871/how-to-plot-png-image-in-ggplot2).]. To address these issues I created a small helper function below based on several suggestions I found in the forums.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npng2df <- function(f) {\n  ## Read the PNG file\n  df <- png::readPNG(f)\n  ## Convert to data.frame of x-y pixel positions and RGBT color for that pixel.\n  ##   Note that the Y variable is reversed as indexing starts in the\n  ##   upper-left (rather than lower-left for plotting)\n  grd <- expand.grid(1:nrow(df),1:ncol(df))\n  dim(df) <- c(nrow(df)*ncol(df),4)\n  df <- cbind(grd,as.data.frame(df)) |>\n    mutate(RGB=rgb(V1,V2,V3,V4),\n           y=-Var1,\n           y=y+max(abs(y))+1) |>\n    select(x=Var2,y=y,RGB)\n  df\n}\n```\n:::\n\n\nThis function takes the PNG filename as its sole argument and returns a data frame of x-y pixel coordinates and the RGBT values to plot at those coordinates.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimg17 <- png2df(\"EB_2017.png\")\nhead(img17)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|    x   y       RGB\n#R|  1 1 455 #838577FF\n#R|  2 1 454 #717365FF\n#R|  3 1 453 #7A7C6CFF\n#R|  4 1 452 #737665FF\n#R|  5 1 451 #7C7F6DFF\n#R|  6 1 450 #787B69FF\n```\n:::\n:::\n\n\nThe y-to-x aspect ratio of this image is needed for plotting purposes below (and is saved here in `ar`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nar <- max(img17$y)/max(img17$x)\n```\n:::\n\n\nThe image can be \"plotted\" by giving this image data frame object with appropriate mapping of aesthetics to `ggplot()` and then using `geom_raster()` along with `scale_fill_identity()`^[`scale_fill_identity()` ensures that the actual RGBT values in the `RGB` variable are used, rather than assigning colors to those values.]. `theme_void()` is used here to remove all axes, margins around the plot, etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=img17,mapping=aes(x=x,y=y,fill=RGB)) + \n  geom_raster() +\n  scale_fill_identity() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-eb17-init-1.png){fig-align='center' width=378.181824}\n:::\n:::\n\n\nIt is evident here that the plotted image will be \"stretched\" to fill the shape of the plotting device (square here). This unwanted behavior can be avoided by setting `aspect.ratio=` in `theme()` to the `ar` value calculated above. Unwanted white space^[This space is not evident on the default white background of this webpage. Change to dark mode (slider in upper-right corner of the title bar) to see the white space.] around the plot can be removed by eliminating the scale expansion with `expansion()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=img17,mapping=aes(x=x,y=y,fill=RGB)) + \n  geom_raster() +\n  scale_fill_identity() +\n  scale_x_continuous(expand=expansion(mult=0)) +\n  scale_y_continuous(expand=expansion(mult=0)) +\n  theme_void() +\n  theme(aspect.ratio=ar)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-eb17-init2-1.png){fig-align='center' width=189.090912}\n:::\n:::\n\n\nFigure 4 in @vaisviletal_2022 also had a letter \"tag\" to the left of the figure. Adding this is a bit of work. First, the letter can be added with `annotate()` using `geom=\"text\"` with the tag label in `label=` and `x=` at the smallest value (i.e.,`-Inf`) and `y=` at the largest value (i.e., `Inf`) to center the label on the very upper-left corner of the plot. An `hjust=` and `vjust=` of 1.5 will move the label down and to the left so that it is fully visible. To make room for this label the left-side plot margin must be increased (from 0, the default in `theme_void()`), the aspect ratio must be adjusted slightly,^[I am not sure how to automatically modify the aspect ratio to adjust for the width of the letter. In this example I used trial-and-error to increase it by 5% (i.e., multiplying `ar` by 1.05).] and `coord_cartesian(clip=\"off\")` must be used so that the label is not \"clipped\" because it is outside the plot region.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\neb17 <- ggplot(data=img17,mapping=aes(x=x,y=y,fill=RGB)) + \n  geom_raster() +\n  scale_fill_identity() +\n  annotate(geom=\"text\",label=\"A\",x=-Inf,y=Inf,\n           hjust=1.5,vjust=1.5,size=5) +\n  coord_cartesian(clip=\"off\") +\n  scale_x_continuous(expand=expansion(mult=0)) +\n  scale_y_continuous(expand=expansion(mult=0)) +\n  theme_void() +\n  theme(plot.margin=margin(l=5,unit=\"mm\"),\n        aspect.ratio=1.05*ar)\neb17\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-eb17-1.png){fig-align='center' width=198.545472}\n:::\n:::\n\n\nThe plot above is assigned to the `eb17` object for later use. I created a similar object for the 2018 image.^[Called `eb18`, but code not shown.]\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n&nbsp;\n\n# Plotting Water Level Fluctuations\n### Water Fluctuation Data\nThe two right panels of Figure 4 in @vaisviletal_2022 are line plots that show the daily rate of change in water levels by day for each year, with the beginning and ending hatch dates for the bass highlighted. The data to construct this plot for both years were provided in JFWM-21-071.S3.csv from [Supplement S3](https://meridian.allenpress.com/jfwm/article/13/2/534/483420/Water-Level-Fluctuations-and-Water-Temperature#supplementary-data) with the published paper. One of the cells in the rate of change variable shows as \"#REF!\", which implies a formula error in when I suspect was the original Excel file. I decided to treat this as missing data and thus needed to include the `na=` code in `read.csv()` below. I also immediately changed most of the variable names to be more concise.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfroc <- read.csv(\"JFWM-21-071.S3.csv\",na=c(\"\",\"#REF!\")) |>\n  select(date=Date_Time,\n         storage=Storage..km.3.,\n         elev=Elevation..m.,\n         roc=Rate.of.Change..cm.)\n```\n:::\n\n\nThe `date` variable is appropriately read in as a character variable and, thus, needs to be converted to a \"date\" type for plotting. Unfortunately, the `date` data were not all recorded in the same format; some \"dates\" included \"0:00\", whereas others did not, as shown below. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nFSA::headtail(dfroc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               date   storage     elev    roc\n#R|  1   1/1/2017 0:00 0.2514777 1314.295 5.4864\n#R|  2   1/2/2017 0:00 0.2531534 1314.349 5.4864\n#R|  3   1/3/2017 0:00 0.2548389 1314.404 6.0960\n#R|  726    12/29/2018 0.1396767 1310.006 4.5720\n#R|  727    12/30/2018 0.1406878 1310.052 4.2672\n#R|  728    12/31/2018 0.1416372 1310.094 6.0960\n```\n:::\n:::\n\n\nTo address this I used `word()` from `stringr` which finds each \"word\" (i.e., separated by a space) in a string. If the second argument to `word()` is set to 1 then it will return the first \"word\", in this case just the date without the \"0:00\". `mdy()` from `lubridate` was then used to convert `date` to a proper date variable and `year()` from `lubridate` was used to create a new variable that was just the year.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfroc <- dfroc |>\n  mutate(date=stringr::word(date,1),\n         date=lubridate::mdy(date),\n         yr=lubridate::year(date))\nFSA::headtail(dfroc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|            date   storage     elev    roc   yr\n#R|  1   2017-01-01 0.2514777 1314.295 5.4864 2017\n#R|  2   2017-01-02 0.2531534 1314.349 5.4864 2017\n#R|  3   2017-01-03 0.2548389 1314.404 6.0960 2017\n#R|  726 2018-12-29 0.1396767 1310.006 4.5720 2018\n#R|  727 2018-12-30 0.1406878 1310.052 4.2672 2018\n#R|  728 2018-12-31 0.1416372 1310.094 6.0960 2018\n```\n:::\n:::\n\n\nFinally, separate data frames for 2017 and 2018 were created.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfroc17 <- dfroc |>\n  filter(yr==2017)\ndfroc18 <- dfroc |>\n  filter(yr==2018)\n```\n:::\n\n\n&nbsp;\n\n### Bass Hatching Data\nHatching dates for individual bass were recorded and provided in JFWM-21-071.S2.csv from [Supplement S2](https://meridian.allenpress.com/jfwm/article/13/2/534/483420/Water-Level-Fluctuations-and-Water-Temperature#supplementary-data) with the published paper. There were no issues with these data so I simply made the variable names more concise and converted the dates to a proper `date` variable similar to above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfhat <- read.csv(\"JFWM-21-071.S2.csv\") |>\n  select(id=FISH.ID,\n         yr=Year,\n         date=Hatch_date) |>\n  mutate(date=lubridate::mdy(date))\nFSA::headtail(dfhat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     id   yr       date\n#R|  1   2 2018 2018-04-13\n#R|  2   3 2018 2018-04-18\n#R|  3   5 2018 2018-04-27\n#R|  62 82 2017 2017-05-05\n#R|  63 83 2017 2017-04-25\n#R|  64 84 2017 2017-05-07\n```\n:::\n:::\n\n\nFigure 4 in @vaisviletal_2022 requires the earliest and latest hatch dates for each year, which are compute below and then separated by year.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfhatsum <- dfhat |>\n  group_by(yr) |>\n  summarize(minhat=min(date),\n            maxhat=max(date))\ndfhatsum\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  # A tibble: 2 × 3\n#R|       yr minhat     maxhat    \n#R|    <int> <date>     <date>    \n#R|  1  2017 2017-04-14 2017-05-29\n#R|  2  2018 2018-04-13 2018-05-28\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndfhatsum17 <- dfhatsum |>\n  filter(yr==2017)\ndfhatsum18 <- dfhatsum |>\n  filter(yr==2018)\n```\n:::\n\n\n&nbsp;\n\n### Graphing Water Fluctuations\nBoth water fluctuation graphs in Figure 4 in @vaisviletal_2022 have the same y-axis range and breaks, based on the range of the data in both years combined. Those limits are computed below from the combined data frame.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( lmts <- range(dfroc$roc,na.rm=TRUE) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] -18.2880  22.5552\n```\n:::\n\n```{.r .cell-code}\nbrks <- seq(-15,20,5)\n```\n:::\n\n\nThe code below creates the water fluctuations plot for 2017. There are four main parts to this code. First, `ggplot()` and `geom_line()` are used to plot the rate of change versus date as a line, which was made slightly larger with `linewidth=` to match Figure 4. Second, two `geom_vline()`s are used to mark the beginning and end hatch dates (as computed above) and `geom_hline()` is used to place a reference line at a rate of change of 0. Third, the axes are more specifically defined. The x-axis is defined with `scale_x_date()` using `breaks=\"month\"` to show a break at each month and `date_labels=\"%b\"` to use character abbreviations for those months. Fourth, the black-and-white theme is applied, the title for the x-axis is removed, and the gridlines on the plot are removed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nroc17 <- ggplot(data=dfroc17,mapping=aes(x=date,y=roc)) +\n  geom_line(linewidth=1) +\n  geom_vline(xintercept=dfhatsum17$minhat,linetype=\"dashed\",linewidth=1) +\n  geom_vline(xintercept=dfhatsum17$maxhat,linetype=\"dashed\",linewidth=1) +\n  geom_hline(yintercept=0,linetype=\"dotted\",linewidth=1) +\n  scale_y_continuous(name=\"Rate-of-change (cm/d)\",expand=expansion(mult=0.01),\n                     limits=lmts,breaks=brks) +\n  scale_x_date(date_breaks=\"month\",date_labels=\"%b\",expand=expansion(mult=0)) +\n  theme_bw(base_size=14) +\n  theme(axis.title.x=element_blank(),\n        panel.grid=element_blank())\nroc17\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-roc17-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nSimilar code was used to construct a similar plot for the 2018 data.^[Called `roc18`, but code not shown.]\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n&nbsp;\n\n# Recreating Figure 4\nBefore Figure 4 can be recreated the x-axis labels must be removed from the water fluctuations plot for 2017.^[I would have done this originally, but I was illustrating above how to make a proper stand-alone plot for that year.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nroc17 <- roc17 +\n  theme(axis.text.x=element_blank())\n```\n:::\n\n\nWith that, Figure 4 in @vaisviletal_2022 can be constructed by combining the four plots created above. Note that the the `widths=` in `plot_layout()` took some trial-and-error so that the satellite images looked correct.^[Explore how to do this by trying different values in that argument.]\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\neb17 + roc17 + eb18 + roc18 +\n  plot_layout(ncol=2,widths=c(0.3,0.7))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/figure-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n:::{.callout-note}\nMy recreation of Figure 4 appears different from that in @vaisviletal_2022. It appears that they removed some rates-of-change values greater than 20 cm/d.\n:::\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}