{
  "hash": "f0a110d4ed816323e4451f11204c4c02",
  "result": {
    "markdown": "---\ntitle: Two New Cumulative Sum Functions\ndescription: Introducing the missing current and reverse cumulative sum functions.\nauthor: Derek H. Ogle\ndate: 9/6/20\nimage: preview.png\ncategories:\n  - FSA\n  - Data Wrangling\n---\n\n\n:::{.callout-note}\nThe following packages are loaded for use below.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(FSA)   ## for pcumsum(), rcumsum()\n```\n:::\n\n\n&nbsp;\n\n# Introduction\nIn fisheries analyses it is fairly common to compute the cumulative sum of values in a vector -- i.e., all values before and including the current position in the vector. For example, the third value in the cumulative sum would be the sum of the first, second, and third values in the original vector. These types of cumulative sums are easily accomplished with `cumsum()` in base R.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec <- 1:10\n( cum <- cumsum(vec) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1]  1  3  6 10 15 21 28 36 45 55\n```\n:::\n\n```{.r .cell-code}\ncum[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 6\n```\n:::\n:::\n\n\nSome applications in fisheries science (e.g., depletion estimators) require the cumulative sum **NOT** including the current value in the vector. For example, the third value in this case would be the sum of the first and second values in the original vector. These values may be computed by subtracting the original vector from the vector returned by `cumsum()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncum-vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1]  0  1  3  6 10 15 21 28 36 45\n```\n:::\n:::\n\n\nIn still other applications (e.g., proportional size distribution calculations) a cumulative sum from the **RIGHT** rather than the left is required.  For example, the third value in this case would be the sum of the third, fourth, fifth, ..., last values in the original vector. These values may be computed by reversing the order of the result from `cumsum()` that had been applied to the reverse order of the original vector.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrev(cumsum(rev(vec)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1] 55 54 52 49 45 40 34 27 19 10\n```\n:::\n:::\n\n\n&nbsp;\n\n# `FSA` Functions\nFor efficiency, these simple processes has been coded in `pcumsum()` and `rcumsum()` in **FSA**.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## cumsum without the current value\n( pcum <- pcumsum(vec) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1]  0  1  3  6 10 15 21 28 36 45\n```\n:::\n\n```{.r .cell-code}\npcum[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 3\n```\n:::\n\n```{.r .cell-code}\n## \"reverse\" (from the right) cumsum\n( rcum <- rcumsum(vec) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1] 55 54 52 49 45 40 34 27 19 10\n```\n:::\n\n```{.r .cell-code}\nrcum[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 52\n```\n:::\n:::\n\n\nThe three types of cumulative sums are shown, along with the original vector, in the matrix below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncbind(vec,cum,pcum,rcum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        vec cum pcum rcum\n#R|   [1,]   1   1    0   55\n#R|   [2,]   2   3    1   54\n#R|   [3,]   3   6    3   52\n#R|   [4,]   4  10    6   49\n#R|   [5,]   5  15   10   45\n#R|   [6,]   6  21   15   40\n#R|   [7,]   7  28   21   34\n#R|   [8,]   8  36   28   27\n#R|   [9,]   9  45   36   19\n#R|  [10,]  10  55   45   10\n```\n:::\n:::\n\n\nThese two new functions are unlikely to change the world as we know it; however, I wanted to document them in this blog so that others could find them if needed.^[The function documentation is available [here](https://fishr-core-team.github.io/FSA/reference/rcumsum.html).]\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}