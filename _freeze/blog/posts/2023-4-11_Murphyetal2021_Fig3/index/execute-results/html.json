{
  "hash": "0fd8963e686bf27f7ae94437fe157bf3",
  "result": {
    "markdown": "---\ntitle: Murphy et al. (2021) Model Comparison Plots\ndescription: Using ggplot2 to recreate the model comparison plots of Murphy et al. (2021).\nauthor: Derek H. Ogle\ndate: 4/11/2023\nimage: preview.png\ncategories:\n  - GAMM\n  - ggplot2\n  - annotations\n  - labels\n---\n\n\n# Introduction\n@murphyetal_2021 examined the ability to use Landsat thermal imagery and a variety of possible environmental data to predict water temperatures in small streams in Alaska. Their [Figure 3](https://meridian.allenpress.com/view-large/figure/13414081/i1944-687X-12-1-12-f03.tif) is a fairly complex graphic that shows hows Landsat observations and predictions from a variety of generalized additive mixed models (GAMMs) compared to *in situ* water temperature measurements. Here I use `ggplot2` to try to recreate their figure.\n\nThe following packages are loaded for use below. A few functions from each of `FSA`, `gtext`, and `scales` are used with `::` such that the entire packages are not attached here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # for dplyr, ggplot2 packages\nlibrary(patchwork)  # for placing multiple plots\nlibrary(mgcv)       # for GAMM analyses\n```\n:::\n\n\nSome of the results below include randomization. To promote reproducibility, the random seed is set here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(7834344)\n```\n:::\n\n\nFinally, to help keep the `ggplot2` code near the end simpler, the following custom theme was created. Its components will be described further below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_murphy <- function() {\n  theme_bw() +\n  theme(panel.grid=element_blank(),\n        legend.position=c(1,1),legend.justification=c(1.1,1.1),\n        legend.title=element_blank(),\n        legend.text=element_text(size=10))\n}\n```\n:::\n\n\n\n&nbsp;\n\n# Data Wrangling I\n@murphyetal_2021 provided the raw data to produce Figure 3 in their Data S1 supplemental material, which I loaded below. `DateTime` was converted to a proper date variable, `SiteCode` was converted to a factor,^[Which is required by `gam()` further below.] only the variables needed for this post were retained, and only observations where both an *in situ* temperature reading and a Landsat prediction were made.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- read.csv(\"JFWM-20-048.S1.csv\") |>\n  mutate(DateTime=as.Date(DateTime,format=\"%m/%d/%Y\"),\n         SiteCode=factor(SiteCode)) |>\n  select(SiteCode,DateTime,In.Situ,Landsat,AirDaily,GageDaily,GageDiff) |>\n  filter(!is.na(In.Situ),!is.na(Landsat))\nFSA::headtail(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     SiteCode   DateTime In.Situ Landsat  AirDaily GageDaily     GageDiff\n#R|  1      CR-1 2015-05-30  11.625   20.74 14.441667 1.0161458 -0.090178571\n#R|  2      CR-1 2015-06-15  14.721   24.46 18.437500 0.9594792 -0.193854167\n#R|  3      CR-1 2015-07-01   9.682   14.03  8.554167 0.7387500 -0.006904762\n#R|  45     SF-3 2015-08-11  12.727   14.26 10.429167 0.6050000  0.005699405\n#R|  46     SF-3 2015-08-18  12.001   14.06 11.433333 0.9793750  0.322574405\n#R|  47     SF-3 2015-09-12   8.792    7.52  7.354167 0.9212500 -0.010520833\n```\n:::\n:::\n\n\n&nbsp;\n\n# GAMMs\n@murphyetal_2021 reported results from the fitting of four GAMMs in panels B-E in their Figure 3. Each model consisted of some combination of Landsat predictions (`Landsat`) and three environmental variables (`AirDaily`, `GageDaily`, and `GageDiff`) as smoothed fixed effects. Each model also included the specific locations (`siteCode`) as a smoothed random effect. The four models shown in Figure 3 were the \"top models\" from many other models considered in the paper. \n\n## Fitting Models\n\n:::{.callout-warning}\nMy goal here is not to fully demonstrate how to fit GAMMs in R, rather I want to show how Figure 3 was constructed. I am not an expert with GAMMs and am, in fact, still learning how to properly use and interpret them. Thus, be cautious and wary about following my work here.\n:::\n\nInputs or results for each of the four GAMMs will be appended with the corresponding panel letter. For example, objects that end with a \"B\" will be related to the GAMM used in panel B.\n\nFour objects are created below that define the GAMM \"formula.\" In these formulae, `s()` is the smoother function provided by `mgcv` and `k=5` is the \"modest maximum basis size\" and `bs=\"cr\"` is the cubic spline smoother used in @murphyetal_2021. The `bs=\"re\"` used for `SiteCode` causes it to be treated as a \"random effect\" as in @murphyetal_2021. This code does not yet perform any analyses, it just creates a \"formula\" to be used next (and later).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformB <- In.Situ~s(AirDaily,k=5,bs=\"cr\")+\n  s(GageDaily,k=5,bs=\"cr\")+\n  s(GageDiff,k=5,bs=\"cr\")+\n  s(SiteCode,bs=\"re\")\nformC <- In.Situ~s(AirDaily,k=5,bs=\"cr\")+\n  s(GageDaily,k=5,bs=\"cr\")+\n  s(GageDiff,k=5,bs=\"cr\")+\n  s(Landsat,k=5,bs=\"cr\")+\n  s(SiteCode,bs=\"re\")\nformD <- In.Situ~s(AirDaily,k=5,bs=\"cr\")+\n  s(SiteCode,bs=\"re\")\nformE <- In.Situ~s(Landsat,k=5,bs=\"cr\")+\n  s(SiteCode,bs=\"re\")\n```\n:::\n\n\nThe actual GAMMs are fit with `gam()` from `mgcv`, taking a formula for the model as the first argument and the corresponding data frame in `data=`. The four lines below fit the four GAMMS of panels B-E using the formula objects created above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmdlB <- gam(formB,data=dat)\nmdlC <- gam(formC,data=dat)\nmdlD <- gam(formD,data=dat)\nmdlE <- gam(formE,data=dat)\n```\n:::\n\n\nFor example, a `summary()` of the model for panel B shows the same r^2^ and smooth term p-values as described in the results of @murphyetal_2021.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(mdlB)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  \n#R|  Family: gaussian \n#R|  Link function: identity \n#R|  \n#R|  Formula:\n#R|  In.Situ ~ s(AirDaily, k = 5, bs = \"cr\") + s(GageDaily, k = 5, \n#R|      bs = \"cr\") + s(GageDiff, k = 5, bs = \"cr\") + s(SiteCode, \n#R|      bs = \"re\")\n#R|  \n#R|  Parametric coefficients:\n#R|              Estimate Std. Error t value Pr(>|t|)    \n#R|  (Intercept)  12.5004     0.8018   15.59   <2e-16 ***\n#R|  ---\n#R|  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#R|  \n#R|  Approximate significance of smooth terms:\n#R|                 edf Ref.df      F  p-value    \n#R|  s(AirDaily)  1.000      1 46.477  < 2e-16 ***\n#R|  s(GageDaily) 1.000      1 18.995  0.00011 ***\n#R|  s(GageDiff)  1.000      1  5.128  0.02984 *  \n#R|  s(SiteCode)  8.257      9  7.384 2.66e-06 ***\n#R|  ---\n#R|  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#R|  \n#R|  R-sq.(adj) =  0.716   Deviance explained = 78.6%\n#R|  GCV = 3.1696  Scale est. = 2.343     n = 47\n```\n:::\n:::\n\n\n## Leave-One-Out Predictions and MSE\n\n:::{.callout-important}\n## Acknowledgment\nThe code in this section would not have been possible without help from the lead author of @murphyetal_2021. I ultimately modified their code, but the general idea is still theirs. Of course, errors in the code presented here are my responsibility. I thank the authors for providing this code to me.\n:::\n\n@murphyetal_2021 used a leave-one-out cross-validation (LOOCV) procedure to generate the root mean square error (MSE) as well as \"LOOCV\" predictions for each model. The general idea here is to fit the GAMM with the first observation removed (i.e., \"left out\"), predict the *in situ* temperature for the first observation from this model, compute the residual between the observed *in situ* and predicted *in situ* temperature for this point, repeat this a number of times,^[@murphyetal_2021 repeated this 100 times.] compute mean squared residual, and save the mean squared residuals and mean predicted *in situ* temperatures. Repeat this process for each of the other observations.^[There were 47 observations in @murphyetal_2021.] Then compute and return the square root of the mean of the mean squared residuals (this is the LOOCV MSE) and the vector of mean predicted *in situ* temperatures related to each observation (i.e., for each `DateTime` and `SiteCode` combination).\n\nThis process is coded into the `loocv.re()` function shown in the folded code below.^[I modified this function from what the authors provided me by including comments, changing some intermediate variable names, removing some inner loops to speed things up, and returning the results in a different way.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nloocv.re <- function(form,dat,n.iters=100){\n  n <- nrow(dat)\n  ## prepare matrix to received LOOCV prediction values (rows are for ith point\n  ##   left-out, columns are for random iterations)\n  predsRE <- matrix(NA,nrow=n,ncol=n.iters)\n  ## perform LOOCV loop\n  for(i in 1:n) {\n    ## fit GAMM with ith row removed\n    mod <- gam(form,data=dat[-i,])\n    ## get random effects SE\n    sitelevs <- paste0(\"s(SiteCode).\",1:length(levels(dat[,\"SiteCode\"])))\n    re.se <- sd(coef(mod)[sitelevs])\n    ## get individual SD\n    resid.se <- sigma(mod)\n    ## predict In.Situ for ith left-out point, excluding SiteCode from GAMM fit\n    p <- predict(mod,newdata=dat[i,],type=\"terms\",exclude=\"s(SiteCode)\")\n    ## get fixed effects portion of prediction\n    predsFE <- sum(p) + attr(p,\"constant\")\n    ## add on random random effects portions\n    predsRE[i,] <- rep(predsFE,n.iters) + \n      rnorm(n.iters,mean=0,sd=re.se) +\n      rnorm(n.iters,mean=0,sd=resid.se)\n  }\n  ## Compute mean of predicted values for each observation using FE+RE\n  mean.predsRE <- rowMeans(predsRE)\n  ## Find all residuals from predicted values using FE+RE\n  residsRE <- matrix(NA,nrow=n,ncol=n.iters)\n  for(i in 1:n) residsRE[i,] <- dat[i,\"In.Situ\"] - predsRE[i,]\n  ## Find MSE from residuals from using predictions from FE+RE\n  MSERE <- sqrt(mean(rowMeans(residsRE)^2))\n  ## Return all results\n  list(mean.predsRE=mean.predsRE,MSERE=MSERE,\n       resids=residsRE,formula=form)\n}\n```\n:::\n\n\nThe process laid out above is applied to the model in panel B below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlooB <- loocv.re(formB,dat=dat)\n```\n:::\n\n\nFrom this result, the MSE can be extracted.^[This MSE may not exactly match that in the published Figure 3 because of the randomization used in making the model predictions. Also 100 iterations is on the low side, such that this value may vary somewhat from run to run (see \"Further Thoughts\" section.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlooB$MSERE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1] 2.455614\n```\n:::\n:::\n\n\nThe mean LOOCV predicted *in situ* temperatures for each observation (i.e., location-date combination) may also be examined.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlooB$mean.predsRE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|   [1] 12.851791 14.149310 11.636388 14.001670 12.315976 12.552054 14.406877\n#R|   [8] 12.111865 14.576413 11.324704 13.884762 13.122397  9.594543 14.072126\n#R|  [15] 11.477815 13.830428 12.831921  9.334164 12.429613 14.532410 12.209832\n#R|  [22] 12.424465 14.553735 11.631457 13.734138 12.551352  9.853848 12.629046\n#R|  [29] 11.580924 14.031804 12.249635  9.467855 15.333607 11.544352 12.818436\n#R|  [36] 12.603421  9.896241 14.343051 13.954222 12.598558  9.358737 12.140968\n#R|  [43] 14.786858 11.550166 13.681013 12.143915  9.626715\n```\n:::\n:::\n\n\nThe LOOCV process was repeated for the other three models below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlooC <- loocv.re(formC,dat=dat)\nlooD <- loocv.re(formD,dat=dat)\nlooE <- loocv.re(formE,dat=dat)\n```\n:::\n\n\nThe resultant MSE values were stored into a named vector for later use.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nMSE <- c(\"B\"=looB$MSERE,\"C\"=looC$MSERE,\"D\"=looD$MSERE,\"E\"=looE$MSERE)\nMSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         B        C        D        E \n#R|  2.455614 2.478938 2.499286 2.545127\n```\n:::\n:::\n\n\nAnd the resultant mean LOOCV predicted *in situ* temperatures were stored into a data frame, along with the corresponding `SiteCode` and `DateTime` information for later use.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean.predsRE <- data.frame(SiteCode=dat$SiteCode,\n                           DateTime=dat$DateTime,\n                           predB=looB$mean.predsRE,\n                           predC=looC$mean.predsRE,\n                           predD=looD$mean.predsRE,\n                           predE=looE$mean.predsRE)\nFSA::headtail(mean.predsRE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     SiteCode   DateTime     predB     predC     predD     predE\n#R|  1      CR-1 2015-05-30 12.851791 11.210556 12.144141 12.568541\n#R|  2      CR-1 2015-06-15 14.149310 14.470042 14.437798 14.684522\n#R|  3      CR-1 2015-07-01 11.636388 12.541739 11.940564 12.973309\n#R|  45     SF-3 2015-08-11 13.681013 13.712191 13.659172 12.561452\n#R|  46     SF-3 2015-08-18 12.143915 12.791890 13.015895 12.910432\n#R|  47     SF-3 2015-09-12  9.626715  9.353639  9.350488  9.646322\n```\n:::\n:::\n\n\n&nbsp;\n\n# Data Wrangling II\nA new data frame is created below to facilitate efficiently reproducing Figure 3. This data frame will contain `SiteCode`, `DateTime`, `InSitu`, and `Landsat` from the original `dat`, but will also have the mean LOOCV predictions for each model joined from `mean.predsRE`.^[All variables from `dat` could have been included but they are not needed to produce Figure 3, so they were removed to decrease clutter when examining the data frame.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat2 <- dat |>\n  select(-(AirDaily:GageDiff)) |>\n  left_join(mean.predsRE,by=c(\"SiteCode\",\"DateTime\"))\nFSA::headtail(dat2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     SiteCode   DateTime In.Situ Landsat     predB     predC     predD     predE\n#R|  1      CR-1 2015-05-30  11.625   20.74 12.851791 11.210556 12.144141 12.568541\n#R|  2      CR-1 2015-06-15  14.721   24.46 14.149310 14.470042 14.437798 14.684522\n#R|  3      CR-1 2015-07-01   9.682   14.03 11.636388 12.541739 11.940564 12.973309\n#R|  45     SF-3 2015-08-11  12.727   14.26 13.681013 13.712191 13.659172 12.561452\n#R|  46     SF-3 2015-08-18  12.001   14.06 12.143915 12.791890 13.015895 12.910432\n#R|  47     SF-3 2015-09-12   8.792    7.52  9.626715  9.353639  9.350488  9.646322\n```\n:::\n:::\n\n\nEach panel in Figure 3 shows the mean *in situ* temperature for each date as well as either the mean temperature predicted from Landsat imagery or one of the four models. These means are computed below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsum2 <- dat2 |>\n  group_by(DateTime) |>\n  summarize(n=n(),\n            mnIS=mean(In.Situ),\n            mnRL=mean(Landsat),\n            mnB=mean(predB),\n            mnC=mean(predC),\n            mnD=mean(predD),\n            mnE=mean(predE))\nsum2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  # A tibble: 6 × 8\n#R|    DateTime       n  mnIS  mnRL   mnB   mnC   mnD   mnE\n#R|    <date>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#R|  1 2015-05-30     6 12.2  20.0  12.5  12.3  12.7  12.7 \n#R|  2 2015-06-15     8 15.2  23.7  14.5  14.6  14.5  14.4 \n#R|  3 2015-07-01     8 12.6  12.6  11.6  12.0  12.0  11.6 \n#R|  4 2015-08-11     9 13.1  13.9  13.8  13.7  13.2  12.5 \n#R|  5 2015-08-18     9 12.1  14.6  12.5  12.4  12.9  13.1 \n#R|  6 2015-09-12     7  9.15  8.63  9.59  9.43  9.26  9.83\n```\n:::\n:::\n\n\nEach panel also shows the MSE between the *in situ* temperatures and the temperatures predicted from Landsat or one of the four GAMMs. The MSEs from the GAMMs were stored above. Below, the MSE from the Landsat predictions is calculated and prepended to the `MSE` vector created above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nMSE_A <- sqrt(sum((dat2$In.Situ-dat2$Landsat)^2)/nrow(dat2))\nMSE <- c(\"A\"=MSE_A,MSE)\nMSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         A        B        C        D        E \n#R|  5.330851 2.455614 2.478938 2.499286 2.545127\n```\n:::\n:::\n\n\nThose values are then turned into a vector of labels for the plots below. Note that `formatC()` is used here rather than `round()` as it will force the full number of digits to be shown (e.g., \"2.50\" rather than \"2.5\"). I also chose two decimals rather than the one used in @murphyetal_2021 to better illustrate the differences (though minor) among the models.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nMSE_lbls <- paste(\"RMSE =\",formatC(MSE,format=\"f\",digits=2))\nnames(MSE_lbls) <- names(MSE)\nMSE_lbls\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|              A             B             C             D             E \n#R|  \"RMSE = 5.33\" \"RMSE = 2.46\" \"RMSE = 2.48\" \"RMSE = 2.50\" \"RMSE = 2.55\"\n```\n:::\n:::\n\n\n\n# Make Figure 3\n## Panel A\nPanels A-E have the same basic structure of layering together several geoms with both raw and summarized data. I demonstrate this layering for Panel A and, then, in the next section show how this is modified to produce Panel B.\n\nPanel A shows *in situ* temperature observations and predictions from landsat images for six dates with multiple locations at each date. *In situ* observations and landsat predictions paired by location are connected within each date. To do this, @murphyetal_2021 \"jittered\" the *in situ* and landsat results slightly at each date. Jittering usually means adding a random amount to each point, which is not what was done in Figure 3. Rather, the groups were \"dodged\" left for the *in situ* observations and right for the landsat predictions. This will be accomplished here by subtracting and adding a small amount to the date (i.e., x-axis) for *in situ* and landsat results, respectively. Below, I set that amount in an object called `ddg` so that it can be held constant for multiple geoms in each panel and also across panels.^[Choosing this value is largely a matter of trial-and-error until you find the look you like.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nddg <- 1.5\n```\n:::\n\n\nI began panel A by plotting lines at the means for both the *in situ* and landsat results. The `color=` is set to a constant string in each `geom_line()` because the *in situ* and landsat results are in separate columns in `sum2` rather than stacked with a second variable describing the source of the value. As seen below, these strings are shown in the legend.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-1-1.png){fig-align='center' width=528}\n:::\n:::\n\n\nPoints that demonstrate the observed *in situ* temperatures and the landsat predicted temperatures are added with `geom_point()`. `ddg` is used here to \"dodge\" the two sets of points. `shape=21` is an open circle outlined in `color=` but filled with `fill=`. Again, because of the arrangement of the data in separate columns, `fill=` is set to a constant string that matches that used for the `geom_line()`s.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='6-9'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-2-1.png){fig-align='center' width=528}\n:::\n:::\n\n\n@murphyetal_2021 connected *in situ* and landsat temperatures paired by location within each date with light gray lines. This is accopmlished with `geom_segment()` below. `geom_segment()` was placed before the `geom_point()`s so that the gray segments would appear behind the points. It is worth noting here that adding these segments is the reason why the data were not stacked and the *in situ* and landsat results were kept in separate columns.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='6-8'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                     y=In.Situ,yend=Landsat),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-3-1.png){fig-align='center' width=528}\n:::\n:::\n\n\nThe MSE and panel labels are added below with `annotate()` using `geom=\"text\"` as demonstrated in previous posts. Note here that `Inf` or `-Inf` cannot be used for the x-axis values because they are dates. Thus, the x-axis position must be chosen by choosing a date and making sure that it is treated as a date with `as.Date()`.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='13-16'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=Landsat),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"A\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"a)\",vjust=1.5,size=11/.pt)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-4-1.png){fig-align='center' width=528}\n:::\n:::\n\n\nThe x-and y-axes were modified as described in previous posts. Note, however, the use of markdown code in the y-axis title, which will require the use of `element_markdown()` from `ggtext` later when a theme is applied.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='17-19'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=Landsat),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"A\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"a)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-5-1.png){fig-align='center' width=528}\n:::\n:::\n\n\nThe colors of the points and lines need to be changed to match those in @murphyetal_2021 and the issue of multiple legends also needs to be addressed. The colors of the lines are set with `scale_color_manual()` below and the fills of the points are set with `scale_fill_manual()` as shown in other posts. Note that `values=` is set to a *named* list where the names are the constant text values used in `color=` for `geom_line()` and `fill=` for `geom_point()` above. The use of `name=` here must be the same in both `scale_fill_manual()` and `scale_color_manual()` so that the two legends above will be merged into a common legend with this name as its title.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='20-23'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=Landsat),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"A\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"a)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\"Raw Landsat\"=\"steelblue1\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\"Raw Landsat\"=\"blue4\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-6-1.png){fig-align='center' width=528}\n:::\n:::\n\n\nFinally, `theme_murphy()` create above was applied. This theme applies the built-in `theme_bw()`, removes all grid lines, moves the legend into the upper-right corner of the plot layer, removes the legend title, and makes the legend text slightly larger than the default. After this the y-axis title will use `element_markdown()` so that the markdown code will be rendered and the x-axis title is removed. Finally, this entire plot is saved into the `pA` object so that it can ultimately be stitched together with the other panels to form Figure 3.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='1,24-27'}\n\n```{.r .cell-code}\npA <- ggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnRL,color=\"Raw Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=Landsat),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,mapping=aes(x=DateTime+ddg,y=Landsat,fill=\"Raw Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"A\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"a)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\"Raw Landsat\"=\"steelblue1\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\"Raw Landsat\"=\"blue4\")) +\n  theme_murphy() +\n  theme(axis.title.y=ggtext::element_markdown(),\n        axis.title.x=element_blank())\npA\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelA-7-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n\n## Panels B-E\nPanel B is constructed very similarly to Panel A. The most important difference is that all references to results related to `Landsat` must be changed to results related to model B. Of course, the object name and colors for the model were also changed. Finally, this panel did not have titles for either axis.\n\n\n::: {.cell layout-align=\"center\" source-line-numbers='1,5-6,9,14-15,18,20,26,29,31,32'}\n\n```{.r .cell-code}\npB <- ggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,\n            mapping=aes(x=DateTime,y=mnB,\n                        color=\"Model = AirDaily + GageDaily + GageDiff\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=predB),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,\n             mapping=aes(x=DateTime+ddg,y=predB,\n                         fill=\"Model = AirDaily + GageDaily + GageDiff\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"B\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"b)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\n                             \"Model = AirDaily + GageDaily + GageDiff\"=\"indianred3\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\n                              \"Model = AirDaily + GageDaily + GageDiff\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title=element_blank())\npB\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-panelB-1-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nSimilar changes were made to produce objects for Panels C-E.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\npC <- ggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,\n            mapping=aes(x=DateTime,y=mnC,\n                        color=\"Model = AirDaily + GageDaily + GageDiff + Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=predC),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,\n             mapping=aes(x=DateTime+ddg,y=predC,\n                         fill=\"Model = AirDaily + GageDaily + GageDiff + Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"C\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"c)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\n                             \"Model = AirDaily + GageDaily + GageDiff + Landsat\"=\"indianred3\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\n                              \"Model = AirDaily + GageDaily + GageDiff + Landsat\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title.y=ggtext::element_markdown(),\n        axis.title.x=element_blank())\n\npD <- ggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,\n            mapping=aes(x=DateTime,y=mnD,\n                        color=\"Model = AirDaily\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=predD),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,\n             mapping=aes(x=DateTime+ddg,y=predD,\n                         fill=\"Model = AirDaily\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"D\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"d)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\n                             \"Model = AirDaily\"=\"indianred3\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\n                              \"Model = AirDaily\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title.y=element_blank())\n\npE <- ggplot() +\n  geom_line(data=sum2,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum2,\n            mapping=aes(x=DateTime,y=mnE,\n                        color=\"Model = Landsat\"),\n            linewidth=2) +\n  geom_segment(data=dat2,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                    y=In.Situ,yend=predE),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat2,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat2,\n             mapping=aes(x=DateTime+ddg,y=predE,\n                         fill=\"Model = Landsat\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"2015-08-05\",format=\"%Y-%m-%d\"),y=-Inf,\n           label=MSE_lbls[[\"E\"]],hjust=0,vjust=-0.5,size=11/.pt) +\n  annotate(geom=\"text\",x=as.Date(\"2015-05-30\",format=\"%Y-%m-%d\"),y=Inf,\n           label=\"e)\",vjust=1.5,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(0,30),breaks=scales::breaks_width(10)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(name=\"legend\",\n                    values=c(\"In Situ\"=\"gray70\",\n                             \"Model = Landsat\"=\"indianred3\")) +\n  scale_color_manual(name=\"legend\",\n                     values=c(\"In Situ\"=\"black\",\n                              \"Model = Landsat\"=\"red4\")) +\n  theme_murphy()\n```\n:::\n\n\n## Putting Panels Together\nAll five panels were then placed together using `patchwork()` to produce the final Figure 3.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npA + pB + pC + pD + pE +\n  plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-fig3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n&nbsp;\n\n# Further Thoughts\nAs I noted above, I am no expert on GAMs or GAMMs. Here, though, I demonstrate a couple questions I had from this analysis. This is not intended as a critique of the authors or their paper, I assume that they knew what they were doing and that these questions come from my current lack of understanding about GAMMs.\n\n### Question 1\nI don't understand the point of adding random error in the authors' LOOCV algorithm when they then average across the iterations. In other words, it seems to me that if you add random error with a mean of 0 to \"something\" for many iterations and then average across those iterations that you are very likely going to get the original \"something.\"\n\nTo examine this, I modified the authors LOOCV routine to also keep track of the \"fixed effects\" portion of the predictions (i.e., the \"something\" prior to adding the random errors).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nloocv.fere <- function(form,dat,n.iters=100){\n  n <- nrow(dat)\n  ## prepare matrix to received LOOCV prediction values (rows are for ith point\n  ##   left-out, columns are for random iterations)\n  predsRE <- matrix(NA,nrow=n,ncol=n.iters)\n  predsFE <- numeric(n)\n  ## perform LOOCV loop\n  for(i in 1:n) {\n    ## fit GAMM with ith row removed\n    mod <- gam(form,data=dat[-i,])\n    ## get random effects SE\n    sitelevs <- paste0(\"s(SiteCode).\",1:length(levels(dat[,\"SiteCode\"])))\n    re.se <- sd(coef(mod)[sitelevs])\n    ## get individual SD\n    resid.se <- sigma(mod)\n    ## predict In.Situ for ith left-out point, excluding SiteCode from GAMM fit\n    p <- predict(mod,newdata=dat[i,],type=\"terms\",exclude=\"s(SiteCode)\")\n    ## get fixed effects portion of prediction\n    predsFE[i] <- sum(p) + attr(p,\"constant\")\n    ## add on random random effects portions\n    predsRE[i,] <- rep(predsFE[i],n.iters) + \n      rnorm(n.iters,mean=0,sd=re.se) +\n      rnorm(n.iters,mean=0,sd=resid.se)\n  }\n  ## Compute MSE just from the predicted mean FE portion\n  MSEFE <- sqrt(mean((dat[,\"In.Situ\"]-predsFE)^2))\n  ## Compute mean of predicted values for each observation using FE+RE\n  mean.predsRE <- rowMeans(predsRE)\n  ## Find all residuals from predicted values using FE+RE\n  residsRE <- matrix(NA,nrow=n,ncol=n.iters)\n  for(i in 1:n) residsRE[i,] <- dat[i,\"In.Situ\"] - predsRE[i,]\n  ## Find MSE from residuals from using predictions from FE+RE\n  MSERE <- sqrt(mean(rowMeans(residsRE)^2))\n  ## Return all results\n  list(mean.predsFE=predsFE,MSEFE=MSEFE,\n       mean.predsRE=mean.predsRE,MSERE=MSERE,\n       resids=residsRE,formula=form)\n}\n```\n:::\n\n\nI then performed the LOOCV analysis with this modified function using 10, 100 (as was done in the paper), 10000, and 1000000 iterations. For each set of iterations I compute the mean difference between mean predictions with and without adding the randomization and showed the MSE for predictions with and without adding the randomization, as well as the difference between the two. The results are shown in the table below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlooB.100 <- loocv.fere(formB,dat=dat)\ntmp.100 <- data.frame(mpFE=looB.100$mean.predsFE,\n                        mpRE=looB.100$mean.predsRE) |>\n   mutate(mpDIFF=mpFE-mpRE)\n\nMSE.100 <- c(\"MSE_FE\"=looB.100$MSEFE,\"MSE_RE\"=looB.100$MSERE,\n             \"MSE_FE-MSE_RE\"=looB.100$MSEFE-looB.100$MSERE)\n\nlooB.10 <- loocv.fere(formB,dat=dat,n.iters=10)\ntmp.10 <- data.frame(mpFE=looB.10$mean.predsFE,\n                           mpRE=looB.10$mean.predsRE) |>\n  mutate(mpDIFF=mpFE-mpRE)\nMSE.10 <- c(\"MSE_FE\"=looB.10$MSEFE,\"MSE_RE\"=looB.10$MSERE,\n            \"MSE_FE-MSE_RE\"=looB.10$MSEFE-looB.10$MSERE)\n\nlooB.10000 <- loocv.fere(formB,dat=dat,n.iters=10000)\ntmp.10000 <- data.frame(mpFE=looB.10000$mean.predsFE,\n                         mpRE=looB.10000$mean.predsRE) |>\n  mutate(mpDIFF=mpFE-mpRE)\n\nMSE.10000 <- c(\"MSE_FE\"=looB.10000$MSEFE,\"MSE_RE\"=looB.10000$MSERE,\n               \"MSE_FE-MSE_RE\"=looB.10000$MSEFE-looB.10000$MSERE)\n\nlooB.1000000 <- loocv.fere(formB,dat=dat,n.iters=1000000)\ntmp.1000000 <- data.frame(mpFE=looB.1000000$mean.predsFE,\n                           mpRE=looB.1000000$mean.predsRE) |>\n  mutate(mpDIFF=mpFE-mpRE)\n\nMSE.1000000 <- c(\"MSE_FE\"=looB.1000000$MSEFE,\"MSE_RE\"=looB.1000000$MSERE,\n                 \"MSE_FE-MSE_RE\"=looB.1000000$MSEFE-looB.1000000$MSERE)\n\ncomp <- data.frame(n.iters=c(\"10\",\"100\",\"10,000\",\"1,000,000\"),\n                   mndiff=c(mean(tmp.10$mpDIFF),mean(tmp.100$mpDIFF),\n                            mean(tmp.10000$mpDIFF),mean(tmp.1000000$mpDIFF))) |>\n  bind_cols(bind_rows(MSE.10,MSE.100,MSE.10000,MSE.1000000))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|   n.iters|  mndiff| MSE_FE| MSE_RE| MSE_FE-MSE_RE|\n|---------:|-------:|------:|------:|-------------:|\n|        10|  0.0055| 2.4572| 2.8127|       -0.3555|\n|       100| -0.0156| 2.4572| 2.4998|       -0.0426|\n|    10,000|  0.0001| 2.4572| 2.4577|       -0.0005|\n| 1,000,000|  0.0002| 2.4572| 2.4577|       -0.0005|\n:::\n:::\n\n\nFrom these results it appears that there is no practical difference between the mean LOOCV predictions based on just the fixed-effects portion or the mean after adding randomization. However, it does appear that there is a difference in the MSE calculations between the two methods, but that those differences are dependent on the number of iterations used. Thus, it appears that part of the MSE value is based on an algorithmic choice rather than characteristics of the data.\n\n### Question 2\nI don't understand the point of having the red points on panels B-E and why they are connected with a gray line. It seems to me that the gray lines are connecting observations (gray points) to a mean (the red points), which is essentially a model residual. Furthermore, this seems further complicated given that the mean predictions (red points) depend on the chosen number of iterations (analysis above). To further illustrate this second point I recreated panel B from Figure 3 using the different numbers of iterations.^[Note that I \"zoomed\" the y-axis in a little bit to reduce white space to better see variation.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndat3 <- dat |>\n  select(-(AirDaily:GageDiff)) |>\n  bind_cols(predB.10=looB.10$mean.predsRE,\n            predB.100=looB.100$mean.predsRE,\n            predB.10000=looB.10000$mean.predsRE,\n            predB.1000000=looB.1000000$mean.predsRE)\n\nsum3 <- dat3 |>\n  group_by(DateTime) |>\n  summarize(n=n(),\n            mnIS=mean(In.Situ),\n            mnB.10=mean(predB.10),\n            mnB.100=mean(predB.100),\n            mnB.10000=mean(predB.10000),\n            mnB.1000000=mean(predB.1000000))\n\npB.10 <- ggplot() +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnB.10,color=\"Model\"),\n            linewidth=2) +\n  geom_segment(data=dat3,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                     y=In.Situ,yend=predB.10),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat3,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat3,mapping=aes(x=DateTime+ddg,y=predB.10,fill=\"Model\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"09/15/2015\",format=\"%m/%d/%Y\"),y=Inf,\n           label=\"10 iterations\",vjust=1.5,hjust=1.1,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(7,23),breaks=scales::breaks_width(5)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(values=c(\"In Situ\"=\"gray70\",\"Model\"=\"indianred3\")) +\n  scale_color_manual(values=c(\"In Situ\"=\"black\",\"Model\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title.y=ggtext::element_markdown(),\n        axis.title.x=element_blank(),\n        legend.position=\"none\")\n\npB.100 <- ggplot() +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnB.100,color=\"Model\"),\n            linewidth=2) +\n  geom_segment(data=dat3,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                     y=In.Situ,yend=predB.100),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat3,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat3,mapping=aes(x=DateTime+ddg,y=predB.100,fill=\"Model\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"09/15/2015\",format=\"%m/%d/%Y\"),y=Inf,\n           label=\"100 iterations\",vjust=1.5,hjust=1.1,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(7,23),breaks=scales::breaks_width(5)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(values=c(\"In Situ\"=\"gray70\",\"Model\"=\"indianred3\")) +\n  scale_color_manual(values=c(\"In Situ\"=\"black\",\"Model\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title=element_blank(),\n        legend.position=\"none\")\n\npB.10000 <- ggplot() +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnB.10000,color=\"Model\"),\n            linewidth=2) +\n  geom_segment(data=dat3,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                     y=In.Situ,yend=predB.10000),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat3,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat3,mapping=aes(x=DateTime+ddg,y=predB.10000,fill=\"Model\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"09/15/2015\",format=\"%m/%d/%Y\"),y=Inf,\n           label=\"10,000 iterations\",vjust=1.5,hjust=1.1,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(7,23),breaks=scales::breaks_width(5)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(values=c(\"In Situ\"=\"gray70\",\"Model\"=\"indianred3\")) +\n  scale_color_manual(values=c(\"In Situ\"=\"black\",\"Model\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title.y=ggtext::element_markdown(),\n        legend.position=\"none\")\n\npB.1000000 <- ggplot() +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnIS,color=\"In Situ\"),\n            linewidth=2) +\n  geom_line(data=sum3,mapping=aes(x=DateTime,y=mnB.1000000,color=\"Model\"),\n            linewidth=2) +\n  geom_segment(data=dat3,mapping=aes(x=DateTime-ddg,xend=DateTime+ddg,\n                                     y=In.Situ,yend=predB.1000000),\n               color=\"gray80\",linewidth=1) +\n  geom_point(data=dat3,mapping=aes(x=DateTime-ddg,y=In.Situ,fill=\"In Situ\"),\n             shape=21,size=3,color=\"black\") +\n  geom_point(data=dat3,mapping=aes(x=DateTime+ddg,y=predB.1000000,fill=\"Model\"),\n             shape=21,size=3,color=\"black\") +\n  annotate(geom=\"text\",x=as.Date(\"09/15/2015\",format=\"%m/%d/%Y\"),y=Inf,\n           label=\"1,000,000 iterations\",vjust=1.5,hjust=1.1,size=11/.pt) +\n  scale_y_continuous(name=\"Temperature (^o^C)\",\n                     limits=c(7,23),breaks=scales::breaks_width(5)) +\n  scale_x_date(name=\"Date\") +\n  scale_fill_manual(values=c(\"In Situ\"=\"gray70\",\"Model\"=\"indianred3\")) +\n  scale_color_manual(values=c(\"In Situ\"=\"black\",\"Model\"=\"red4\")) +\n  theme_murphy() +\n  theme(axis.title.y=element_blank(),\n        legend.position=\"none\")\n\npB.10 + pB.100 + pB.10000 + pB.1000000 + plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig3-compare-niter-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFrom this it appears that the red points are simply \"noise\" around the red line that is primarily reflective of the number of iterations used in the LOOCV procedure.\n\n:::{.callout-important}\nTo be clear, neither of these questions does anything to change the authors' conclusions as they are simply related to relatively minor details about how the results are presented (or how the same results could have been derived differently).\n:::\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}