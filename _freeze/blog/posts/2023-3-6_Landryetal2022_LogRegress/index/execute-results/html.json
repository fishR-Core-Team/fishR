{
  "hash": "93c7a954b79ef7f56b59ef258668056c",
  "result": {
    "markdown": "---\ntitle: Landry et al. (2022) Logistic Regression Figures\ndescription: Using ggplot2 to recreate the logistic regression figures in Landry et al. (2022).\nauthor: Derek H. Ogle\ndate: 3/6/2023\nimage: preview.png\ncategories:\n  - ggplot2\n  - Logistic Regression\n---\n\n\n# Introduction\n\n@landryetal_2022 examined the diets of Bobcats (*Lynx rufus*) in West Virginia. They used logistic regression analyses in two parts of their analyses and presented those findings in their [Figure 2](https://meridian.allenpress.com/view-large/figure/15049887/i1944-687X-13-2-447-f02.tif) and [Figure 3](https://meridian.allenpress.com/view-large/figure/15049891/i1944-687X-13-2-447-f03.tif). In [a previous post](../2021-5-25_fitPlot-replacement/#using-a-built-in-function-2) I demonstrated how to produce similar plots using `geom_smooth()` from `ggplot2`. Here I want to show an alternative method that is more laborious, but I am starting to prefer as it (a) seems to always work, (b) generalizes more easily, and (c) is not a \"black box.\"\n\n# Getting Setup\nThe following packages are loaded for use below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # for dplyr, ggplot2 packages\nlibrary(patchwork)  # for positioning multiple plots in Figure 2\n```\n:::\n\n\nThe `ggplot2` theme was set to `theme_bw()` but with modifications to more closely match the author's choices (i.e., gridlines removed, centered and bolded plot title, slightly larger and bolded axis tick labels, rotated axis tick labels for the y-axis, and slightly larger and bolded text and title for the legend).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(\n  theme_bw() +\n  theme(panel.grid=element_blank(),\n        plot.title=element_text(hjust=0.5,face=\"bold\"),\n        axis.text=element_text(size=11,face=\"bold\"),\n        axis.text.y=element_text(angle=90,hjust=0.5),\n        legend.title=element_text(size=11,face=\"bold\"),\n        legend.text=element_text(size=11,face=\"bold\"))\n)\n```\n:::\n\n\nThe x-axis of Figure 2 is labeled with \"KFI<sub>i</sub>\". In `ggplot2` the subscript is created with `[i]` as long as the text is wrapped in `expression()`. To minimize typing, I created an object with this expression here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nKFI_lbl <- expression(KFI[i])\n```\n:::\n\n\nThe process to construct the plots described below requires using the logistic regression model to predict logit-transformed values of the response variable. These values are back-transformed to the probability scale by \"reversing\" the [logit transformation](https://www.statsref.com/HTML/logit.html). I coded this back-transformation function here for use below several times.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compute probablity (p) from a value x on the logit scale\ninverse_logit <- function(x) exp(x)/(1+exp(x))\n```\n:::\n\n\n&nbsp;\n\n# Get Data\n@landryetal_2022 provided the raw data for their study as a supplementary CSV file called \"JFWM-22-001.S1.csv\". I loaded this file from my local directory, changed the `Season` variable from a numerical code to relevant labels, and restricted the data frame to only those variables used in this post.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- read.csv(\"JFWM-22-001.S1.csv\") |>\n  mutate(Season=case_when(\n    Season==1 ~ \"2014-2015\",\n    Season==2 ~ \"2015-2016\")) |>\n  select(Season,KFI_i,HardMast,Rabbits_Hares,Opossum,Squirrels)\n\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       Season    KFI_i HardMast Rabbits_Hares Opossum Squirrels\n#R|  1 2014-2015 42.64947 32.03768             0       0         0\n#R|  2 2014-2015 44.44444 32.03768             0       1         0\n#R|  3 2014-2015 18.75000 32.03768             0       0         0\n#R|  4 2014-2015 33.15203 32.03768             0       0         1\n#R|  5 2014-2015 14.28571 32.03768             1       0         0\n#R|  6 2014-2015 22.22222 32.03768             0       0         0\n```\n:::\n:::\n\n\nThe `Rabbits_Hares`, `Opossum`, and `Squirrels` variables are code as `1` if that prey item occurred in the diet and a `0` if that prey did not occur in the diet.\n\n# Recreating Figure 2\n## Fitting the Logistic Regression\nA logistic regression is computed in R with `glm()` using a formula of the form `response~explanatory` as the first argument, the relevant data frame in `data=`, and `family=\"binomial\"` to force using the logit transformation and, thus, the fitting of a logistic regression. The `response` variable can either be coded as `0`s and `1`s, as it is here, or as a factor where the first level is the \"failure.\" The logistic regression examining the occurrence of Virginia Opossum in the diet of Bobcats relative to the KFI<sub>i</sub> index is fit below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglmOpo <- glm(Opossum~KFI_i,data=dat,family=\"binomial\")\n```\n:::\n\n\nThe results of the logistic regression are obtained from giving the object saved from `glm()` to `summary()`. These results are the same as those presented in @landryetal_2022.^[See sentence directly above their Figure 2.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(glmOpo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  \n#R|  Call:\n#R|  glm(formula = Opossum ~ KFI_i, family = \"binomial\", data = dat)\n#R|  \n#R|  Deviance Residuals: \n#R|      Min       1Q   Median       3Q      Max  \n#R|  -1.2694  -0.6694  -0.5652  -0.4397   2.2644  \n#R|  \n#R|  Coefficients:\n#R|              Estimate Std. Error z value Pr(>|z|)    \n#R|  (Intercept) -3.11771    0.52556  -5.932 2.99e-09 ***\n#R|  KFI_i        0.05002    0.01463   3.418  0.00063 ***\n#R|  ---\n#R|  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#R|  \n#R|  (Dispersion parameter for binomial family taken to be 1)\n#R|  \n#R|      Null deviance: 288.81  on 299  degrees of freedom\n#R|  Residual deviance: 276.67  on 298  degrees of freedom\n#R|  AIC: 280.67\n#R|  \n#R|  Number of Fisher Scoring iterations: 4\n```\n:::\n:::\n\n\n## Making a Data Frame of Predicted Probabilities\nThe first step in recreating Figure 2 is to create a data frame of predicted probabilities, with 95% confidence intervals, for the occurrence of Virginia Opossums in the diet across the range of observed KFI<sub>i</sub> values. I begin this process by creating a data frame that has a `KFI_i` variable^[This variable name must be exactly as it was in the data frame used in `glm()` above.] with a sequence of 199 values^[The larger this number, the smoother the resultant curve in the figure will be.] from the minimum to maximum observed KFI<sub>i</sub> values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nKFI_i_df <- data.frame(KFI_i=seq(min(dat$KFI_i),max(dat$KFI_i),length.out=199))\nhead(KFI_i_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        KFI_i\n#R|  1  9.560078\n#R|  2  9.848166\n#R|  3 10.136254\n#R|  4 10.424343\n#R|  5 10.712431\n#R|  6 11.000519\n```\n:::\n:::\n\n\nPredicted values may be obtained with `predict()`, but for logistic regression `interval=\"confidence\"` is not supported, so corresponding confidence interval values are not automatically computed. However, `predict()` can be used to make predictions, with standard errors, on the logit-transformed scale, which can then be used to  \"manually\" calculate confidence intervals. The predictions on the logit-transformed scale and the corresponding standard errors are returned by including `type=\"link\"` and `se.fit=TRUE`. `predict()` returns a list by default, but I forced it into a data frame below for easier manipulation further below.^[For our purposes, ignore the `residual.scale` column.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredOpo <- predict(glmOpo,KFI_i_df,type=\"link\",se.fit=TRUE) |>\n  as.data.frame()\nhead(predOpo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         fit    se.fit residual.scale\n#R|  1 -2.63952 0.3936826              1\n#R|  2 -2.62511 0.3897950              1\n#R|  3 -2.61070 0.3859143              1\n#R|  4 -2.59629 0.3820407              1\n#R|  5 -2.58188 0.3781745              1\n#R|  6 -2.56747 0.3743157              1\n```\n:::\n:::\n\n\nIt is important to note here that the `fit` values in this data frame are on the logit-transformed scale. These values can be back-transformed to predicted probabilities using the `inverse_logit()` function created above. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredOpo <- predOpo |>\n  mutate(predProb=inverse_logit(fit))\nhead(predOpo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         fit    se.fit residual.scale   predProb\n#R|  1 -2.63952 0.3936826              1 0.06663790\n#R|  2 -2.62511 0.3897950              1 0.06753978\n#R|  3 -2.61070 0.3859143              1 0.06845296\n#R|  4 -2.59629 0.3820407              1 0.06937757\n#R|  5 -2.58188 0.3781745              1 0.07031373\n#R|  6 -2.56747 0.3743157              1 0.07126156\n```\n:::\n:::\n\n\nApproximate 95% confidence intervals for the **logit-transformed** predictions can be made by adding and subtracting 1.96 times the standard error from each predicted value.^[1.96 comes from normal distribution theory.] These values are then back-transformed to construct confidence intervals on the probability scale.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredOpo <- predOpo |>\n  mutate(predLCI=inverse_logit(fit-1.96*se.fit),\n         predUCI=inverse_logit(fit+1.96*se.fit))\nhead(predOpo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         fit    se.fit residual.scale   predProb    predLCI   predUCI\n#R|  1 -2.63952 0.3936826              1 0.06663790 0.03194919 0.1337847\n#R|  2 -2.62511 0.3897950              1 0.06753978 0.03263760 0.1345735\n#R|  3 -2.61070 0.3859143              1 0.06845296 0.03333990 0.1353679\n#R|  4 -2.59629 0.3820407              1 0.06937757 0.03405632 0.1361679\n#R|  5 -2.58188 0.3781745              1 0.07031373 0.03478710 0.1369735\n#R|  6 -2.56747 0.3743157              1 0.07126156 0.03553248 0.1377849\n```\n:::\n:::\n\n\nFinally, I \"bind as columns\" the original data frame of KFI<sub>i</sub> values and select (and slightly re-arrange) the variables needed to make the figure.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredOpo <- predOpo |>\n  bind_cols(KFI_i_df) |>\n  select(KFI_i,predProb,predLCI,predUCI)\nhead(predOpo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|        KFI_i   predProb    predLCI   predUCI\n#R|  1  9.560078 0.06663790 0.03194919 0.1337847\n#R|  2  9.848166 0.06753978 0.03263760 0.1345735\n#R|  3 10.136254 0.06845296 0.03333990 0.1353679\n#R|  4 10.424343 0.06937757 0.03405632 0.1361679\n#R|  5 10.712431 0.07031373 0.03478710 0.1369735\n#R|  6 11.000519 0.07126156 0.03553248 0.1377849\n```\n:::\n:::\n\n\nThe steps above were separated to show the process. In practice, I would complete these steps in one set of code shown below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredOpo <- predict(glmOpo,KFI_i_df,type=\"link\",se.fit=TRUE) |>\n  as.data.frame() |>\n  mutate(predProb=inverse_logit(fit),\n         predLCI=inverse_logit(fit-1.96*se.fit),\n         predUCI=inverse_logit(fit+1.96*se.fit)) |>\n  bind_cols(KFI_i_df) |>\n  select(KFI_i,predProb,predLCI,predUCI)\n```\n:::\n\n\nJust to be clear, `predOpo` created here contains a large sequence of KFI<sub>i</sub> values across the observed range of this variable, the predicted probability that Virginia Opossum will occur in the diet of Bobcat for each of these KFI<sub>i</sub> values, and approximate 95% confidence intervals for each of those predicted probabilities. These are the data required to reconstruct one panel of Figure 2.\n\n## Making one Sub-Panel\nShowing the logistic regression results for Virginia Opossums (i.e., one panel in Figure 2) largely consists of plotting the predicted probabilities and 95% confidence bounds against the KFI<sub>i</sub> values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npVO <- ggplot(data=predOpo,mapping=aes(x=KFI_i)) +\n  geom_line(mapping=aes(y=predProb)) +\n  geom_line(mapping=aes(y=predLCI)) +\n  geom_line(mapping=aes(y=predUCI))\npVO\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-opo-panel-1-1.png){fig-align='center' width=336}\n:::\n:::\n\n\n`geom_ribbon()` can be used to shade the area between the two confidence bounds. However, `geom_ribbon()` should appear first so that the plotted lines will be \"on top\" of it and, thus, visible.^[I filled the ribbon with \"darkslategray\" in an attempt to match the author's color choice.] Including `color=\"black\"` in `geom_ribbon()` will also color the bounding lines of the ribbon, so that the separate `geom_line()`s for the confidence bounds are not needed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npVO <- ggplot(data=predOpo,mapping=aes(x=KFI_i)) +\n  geom_ribbon(mapping=aes(ymin=predLCI,ymax=predUCI),\n              fill=\"darkslategray4\",color=\"black\") +\n  geom_line(mapping=aes(y=predProb))\npVO\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-opo-panel-2-1.png){fig-align='center' width=336}\n:::\n:::\n\n\nFinally, to follow the author's choices, I labeled the y-axis and adjusted its limits, breaks, and expansion factor; labeled the x-axis and adjusted its expansion factor; provided an overall plot title; and placed an \"(A)\" label in the upper-left corner.^[This seemed redundant to me given the plot title.] Thus, the final code for this portion of Figure 2 is as follows.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npVO <- ggplot(data=predOpo,mapping=aes(x=KFI_i)) +\n  geom_ribbon(mapping=aes(ymin=predLCI,ymax=predUCI),\n              fill=\"darkslategray4\",color=\"black\") +\n  geom_line(mapping=aes(y=predProb)) +\n  scale_y_continuous(name=\"Proportion of Occurrence\",\n                     limits=c(0,1),breaks=seq(0,1,0.2),\n                     expand=expansion(mult=0.02)) +\n  scale_x_continuous(name=KFI_lbl,\n                     expand=expansion(mult=0.02)) +\n  labs(title=\"Virginia Opossum\") +\n  annotate(geom=\"text\",x=-Inf,y=Inf,label=\"(A)\",\n           hjust=-0.5,vjust=1.5)\n```\n:::\n\n\n## Finishing the Figure\nThe final Figure 2 has a second panel for \"Rabbits.\" Thus, the code from above was copied and adjusted slightly to make a similar plot for rabbits.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# fit logistic regression\nglmRab <- glm(Rabbits_Hares~KFI_i,data=dat,family=\"binomial\")\n\n# make predicted probabilities data frame\npredRab <- predict(glmRab,KFI_i_df,type=\"link\",se.fit=TRUE) |>\n  as.data.frame() |>\n  mutate(predProb=inverse_logit(fit),\n         predLCI=inverse_logit(fit-1.96*se.fit),\n         predUCI=inverse_logit(fit+1.96*se.fit)) |>\n  bind_cols(KFI_i_df) |>\n  select(KFI_i,predProb,predLCI,predUCI)\n\n# make the plot\npRH <- ggplot(data=predRab,mapping=aes(x=KFI_i)) +\n  geom_ribbon(mapping=aes(ymin=predLCI,ymax=predUCI),\n              fill=\"darkslategray4\",color=\"black\") +\n  geom_line(mapping=aes(y=predProb)) +\n  scale_y_continuous(name=\"Proportion of Occurrence\",\n                     limits=c(0,1),breaks=seq(0,1,0.2),\n                     expand=expansion(mult=0.02)) +\n  scale_x_continuous(name=KFI_lbl,\n                     expand=expansion(mult=0.02)) +\n  labs(title=\"Rabbit\") +\n  annotate(geom=\"text\",x=-Inf,y=Inf,label=\"(B)\",\n           hjust=-0.5,vjust=1.5)\n```\n:::\n\n\nThe two plots are placed side-by-side as shown below using functionality from the `patchwork` package.^[The author's used longer ticks on the axes then I used here. Also, their figure has vertical \"striations\" that I think are a result of how they constructed the plot and not a feature to be replicated.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npVO + pRH\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-figure-2-1.png){fig-align='center' width=720}\n:::\n:::\n\n\n&nbsp;\n\n# Recreating Figure 3\n## Fitting the Logistic Regression\nFigure 3 is used by @landryetal_2022 to demonstrate an interaction effect of season of capture on the relationship between the occurrence of squirrels in the diet of Bobcat and hard mast index. Thus, a logistic regression is fit with hard mast index, season, and the interaction between hard mast index and season as explanatory \"variables.\"^[I coded the three explanatory terms explicitly here, however `HardMast*Season` would have expanded to code all three as well.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglmSqrl <- glm(Squirrels~HardMast+Season+HardMast:Season,data=dat,family=\"binomial\")\n```\n:::\n\n\nThe summary results (not shown here) match those in @landryetal_2022.^[See results in the second sentence above Figure 3.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(glmSqrl)\n```\n:::\n\n\n## Making a Data Frame of Predicted Probabilities\nSimilar to constructing Figure 2, a data frame of predicted probabilities with 95% confidence intervals at a large number of hard mast index values is needed to reproduce Figure 3. However, the probabilities must be predicted for **both seasons**. The data frame used to make the predictions must have a variable for the hard mast index values and the season as the `glm()` fit above used both of these variables. Thus, this data frame must have the 199 hard mast index values repeated twice, corresponding to the two seasons and each season repeated 199 times to match the hard mast index values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nHM_df <- data.frame(\n  HardMast=rep(seq(min(dat$HardMast),max(dat$HardMast),length.out=199),2),\n  Season=rep(unique(dat$Season),each=199))\nFSA::headtail(HM_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|      HardMast    Season\n#R|  1   26.92086 2014-2015\n#R|  2   27.06435 2014-2015\n#R|  3   27.20784 2014-2015\n#R|  396 55.04534 2015-2016\n#R|  397 55.18883 2015-2016\n#R|  398 55.33232 2015-2016\n```\n:::\n:::\n\n\nWith this data frame, the data frame of predicted probabilities is constructed as demonstrated for Figure 2.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredSqrl <- predict(glmSqrl,HM_df,type=\"link\",se.fit=TRUE) |>\n  as.data.frame() |>\n  mutate(predProb=inverse_logit(fit),\n         predLCI=inverse_logit(fit-1.96*se.fit),\n         predUCI=inverse_logit(fit+1.96*se.fit)) |>\n  bind_cols(HM_df) |>\n  select(HardMast,Season,predProb,predLCI,predUCI)\nFSA::headtail(predSqrl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|      HardMast    Season  predProb   predLCI   predUCI\n#R|  1   26.92086 2014-2015 0.3040081 0.1317484 0.5570061\n#R|  2   27.06435 2014-2015 0.2962642 0.1309603 0.5404592\n#R|  3   27.20784 2014-2015 0.2886357 0.1301474 0.5238861\n#R|  396 55.04534 2015-2016 0.2846782 0.1470444 0.4788193\n#R|  397 55.18883 2015-2016 0.2853101 0.1466732 0.4811068\n#R|  398 55.33232 2015-2016 0.2859428 0.1463013 0.4833981\n```\n:::\n:::\n\n\n## Finishing the Figure\nFigure 3 is constructed very similarly to Figure 2 except that a `fill=` color must be mapped to `Season` in `geom_ribbon()` and `linetype=` must be mapped to `Season` in `geom_line()`.^[In `geom_ribbon()` I did not include `color=` because the authors did not outline the confidence regions. I included a slight transparency with `alplha=0.75` so the two regions were more visible where they overlapped.] `scale_fill_manual()` and `scale_linetype_manual()` are used to over-ride the default fill colors and line types to better match the author's choices. Further `guide=\"none\"` wais used in `scale_fill_manual()` as the author's did not show the fill color in their legend. Finally, I manually positioned the legend 75% of the way along the x-axis and 80% of the way up the y-axis.^[Again, the author's Figure 3 looks striated, but I did not consider this a feature of the plot.]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=predSqrl,mapping=aes(x=HardMast)) +\n  geom_ribbon(mapping=aes(ymin=predLCI,ymax=predUCI,fill=Season),\n              alpha=0.75) +\n  geom_line(mapping=aes(y=predProb,linetype=Season)) +\n  scale_y_continuous(name=\"Proportion of Occurrence\",\n                     limits=c(0,1),breaks=seq(0,1,0.2),\n                     expand=expansion(mult=0.02)) +\n  scale_x_continuous(name=\"Hard Mast Index\",\n                     expand=expansion(mult=0.02)) +\n  scale_fill_manual(values=c(\"2014-2015\"=\"darkslategray\",\"2015-2016\"=\"gray75\"),\n                    guide=\"none\") +\n  scale_linetype_manual(values=c(\"2014-2015\"=\"solid\",\"2015-2016\"=\"dashed\")) +\n  labs(title=\"Squirrel\") +\n  theme(legend.position=c(0.75,0.8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-figure-3-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n&nbsp;\n\nIt should be noted that this plot does not fully match Figure 3 in @landryetal_2022. This is most evident for the 2014-2015 seasons at small hard mast indices where the authors predicted probability approaches 0.4 more closely and the upper level of the confidence region is above 0.6. I am not sure what explains this difference but it *could be* that the author's used a slightly lower minimum hard mast index for their predictions or that their predicted values were made from separate logistic regressions for each season.\n\n&nbsp;\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Further Thoughts\nIt is not my point with these posts to critique the author's presentations -- there are more than one way to present results and many times it is personal preference. Below, though, I articulate changes to the figures that I would prefer.\n\n## Show the Data\nI generally don't like plots that don't show observed data, which is the case for both Figures 2 and 3. The observed data can be added to the plot using `geom_point()` as shown in [a previous post](../2021-5-25_fitPlot-replacement/#using-manually-predicted-values-1). Note that the `data=predOpo` had to be removed from `ggplot()` and added to `geom_ribbon()` and `geom_line()` because, with this addition, `geom_point()` uses a different data frame. When geoms use different data frames, those data frames must be declared in the geom rather than in `ggplot()`. Also note the use of `alpha=` here so that the points are semi-transparent to handle overplotting.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npVO2 <- ggplot(mapping=aes(x=KFI_i)) +\n  geom_ribbon(data=predOpo,mapping=aes(ymin=predLCI,ymax=predUCI),\n              fill=\"darkslategray4\",color=\"black\") +\n  geom_line(data=predOpo,mapping=aes(y=predProb)) +\n  geom_point(data=dat,mapping=aes(y=Opossum),alpha=0.2) +\n  scale_y_continuous(name=\"Proportion of Occurrence\",\n                     limits=c(0,1),breaks=seq(0,1,0.2),\n                     expand=expansion(mult=0.02)) +\n  scale_x_continuous(name=KFI_lbl,\n                     expand=expansion(mult=0.02)) +\n  labs(title=\"Virginia Opossum\") +\n  annotate(geom=\"text\",x=-Inf,y=Inf,label=\"(A)\",\n           hjust=-0.5,vjust=1.5)\npVO2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-opo-panel-2-1.png){fig-align='center' width=336}\n:::\n:::\n\n\n## Present Only Over the Range of the Group's Data\nFigure 3 as created above and shown in @landryetal_2022 implies the same range of hard mast index values in both seasons (i.e., the logistic regression model is presented over the same range of hard mast index values for both seasons). However, a summary of the range of hard mast index values for each season reveals very little overlap between the two seasons.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsmry <- dat |>\n  group_by(Season) |>\n  summarize(n=n(),\n            minHM=min(HardMast,na.rm=TRUE),\n            maxHM=max(HardMast,na.rm=TRUE))\nsmry\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  # A tibble: 2 × 4\n#R|    Season        n minHM maxHM\n#R|    <chr>     <int> <dbl> <dbl>\n#R|  1 2014-2015   150  26.9  33.5\n#R|  2 2015-2016   150  29.8  55.3\n```\n:::\n:::\n\n\nMy preference is to show the model fits across the ranges observed within each season. To do so requires modifying `HM_df` from above to use the range of values within each season, rather than the range of values for both seasons combined. I could not find a simple way to do this, though it is accomplished below using `smry` from above and a combination of `apply()`, with a user-defined function for sequence, and `pivot_longer()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nseq2 <- function(x) seq(x[\"minHM\"],x[\"maxHM\"],length.out=199)\n\ntmp <- apply(smry,MARGIN=1,FUN=seq2) |>\n  as.data.frame()\nnames(tmp) <- smry$Season\n\nHM_df <- pivot_longer(tmp,cols=everything(),\n                      values_to=\"HardMast\",names_to=\"Season\") |>\n  arrange(Season,HardMast)\n\nFSA::headtail(HM_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         Season HardMast\n#R|  1   2014-2015 26.92086\n#R|  2   2014-2015 26.95414\n#R|  3   2014-2015 26.98742\n#R|  396 2015-2016 55.07422\n#R|  397 2015-2016 55.20327\n#R|  398 2015-2016 55.33232\n```\n:::\n:::\n\n\nThen make a new predicted probabilities data frame from this new data frame.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredSqrl <- predict(glmSqrl,HM_df,type=\"link\",se.fit=TRUE) |>\n  as.data.frame() |>\n  mutate(predProb=inverse_logit(fit),\n         predLCI=inverse_logit(fit-1.96*se.fit),\n         predUCI=inverse_logit(fit+1.96*se.fit)) |>\n  bind_cols(HM_df) |>\n  select(HardMast,Season,predProb,predLCI,predUCI)\nFSA::headtail(predSqrl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|      HardMast    Season  predProb   predLCI   predUCI\n#R|  1   26.92086 2014-2015 0.3040081 0.1317484 0.5570061\n#R|  2   26.95414 2014-2015 0.3022018 0.1315677 0.5531727\n#R|  3   26.98742 2014-2015 0.3004017 0.1313858 0.5493363\n#R|  396 55.07422 2015-2016 0.2848053 0.1469697 0.4792794\n#R|  397 55.20327 2015-2016 0.2853737 0.1466358 0.4813372\n#R|  398 55.33232 2015-2016 0.2859428 0.1463013 0.4833981\n```\n:::\n:::\n\n\nAnd remake the plot, also including the raw data. Note that I changed colors here as the original colors in Figure 3 could not be differentiated well when using semi-transparency for over-plotting.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mapping=aes(x=HardMast)) +\n  geom_ribbon(data=predSqrl,mapping=aes(ymin=predLCI,ymax=predUCI,fill=Season),\n              alpha=0.75) +\n  geom_line(data=predSqrl,mapping=aes(y=predProb,linetype=Season)) +\n  geom_point(data=dat,mapping=aes(y=Squirrels,color=Season),\n             alpha=0.1) +\n  scale_y_continuous(name=\"Proportion of Occurrence\",\n                     limits=c(0,1),breaks=seq(0,1,0.2),\n                     expand=expansion(mult=0.02)) +\n  scale_x_continuous(name=\"Hard Mast Index\",\n                     expand=expansion(mult=0.02)) +\n  scale_fill_manual(values=c(\"2014-2015\"=\"red4\",\"2015-2016\"=\"cyan4\"),\n                    guide=\"none\") +\n  scale_color_manual(values=c(\"2014-2015\"=\"red4\",\"2015-2016\"=\"cyan4\"),\n                     guide=\"none\") +\n  scale_linetype_manual(values=c(\"2014-2015\"=\"solid\",\"2015-2016\"=\"dashed\")) +\n  labs(title=\"Squirrel\") +\n  theme(legend.position=c(0.75,0.8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/make-figure-3a-1.png){fig-align='center' width=480}\n:::\n:::\n\n\n&nbsp;\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}